/*
* Copyright (c) 2019, Intel Corporation
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of the Intel Corporation nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
* ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/


#pragma once

#include "Teisko/Algorithm/Functors.hpp"
#include "Teisko/BayerInfo.hpp"
#include "Teisko/Chromaticity.hpp"
#include "Teisko/Color.hpp"
#include "Teisko/Algorithm/Interpolate.hpp"
#include "Teisko/Data/MacbethReflectance.hpp"
#include "Teisko/Data/MunsellReflectance.hpp"
#include <map>
#include <numeric>
#include <vector>

/// \brief This namespace defines the public interfaces of
/// the \ref libmsr_module module
namespace Teisko
{
    enum class lightsource_type
    {
        None = 0,
        A,
        B,
        C,
        D50,
        D55,
        D65,
        D75,
        E,
        F1,
        F2,
        F3,
        F4,
        F5,
        F6,
        F7,
        F8,
        F9,
        F10,
        F11,
        F12,
    };

    struct function_of_wavelength_data
    {
        std::vector<float> function;
        uint16_t minimum_wavelength;
        uint16_t maximum_wavelength;
    };

    struct illuminant : function_of_wavelength_data
    {
        illuminant() = default;
        illuminant(lightsource_type ls_type, function_of_wavelength_data data)
            : function_of_wavelength_data(data)
        {
            lightsource = ls_type;
        }

        lightsource_type lightsource;

        /// <summary>
        /// Calculates the response under illuminant
        /// using given observer data and object reflectance.
        ///
        /// C(lambda) = observer (e.g. module response or ciexy 1931 2 degree standard observer)
        /// R(lambda) = object spectral reflectance
        /// L(lambda) = illuminant spectral power distribution
        /// response = summation over wavelength range(C(lambda) * R(lambda) * L(lambda))
        /// </summary>
        /// <returns> response </returns>
        float get(
            const function_of_wavelength_data &observer,
            const function_of_wavelength_data &reflectance) const
        {
            // Find maximum wavelength range where all observer, reflectance and
            // illuminant are defined
            auto minimum_common_wl = std::max(
                { observer.minimum_wavelength, reflectance.minimum_wavelength, minimum_wavelength });
            auto maximum_common_wl = std::min(
                { observer.maximum_wavelength, reflectance.maximum_wavelength, maximum_wavelength });

            auto observer_min_index = minimum_common_wl - observer.minimum_wavelength;
            auto reflectance_min_index = minimum_common_wl - reflectance.minimum_wavelength;
            auto illuminant_min_index = minimum_common_wl - minimum_wavelength;

            auto count = maximum_common_wl - minimum_common_wl + 1;

            // Construct observer, reflectance and illuminant data with common wavelength range
            std::vector<float> observer_common_range{ observer.function.begin() + observer_min_index,
                observer.function.begin() + observer_min_index + count };
            std::vector<float> reflectance_common_range{ reflectance.function.begin() + reflectance_min_index,
                reflectance.function.begin() + reflectance_min_index + count };
            std::vector<float> illuminant_common_range{ function.begin() + illuminant_min_index,
                function.begin() + illuminant_min_index + count };

            return integral(observer_common_range,
                reflectance_common_range,
                illuminant_common_range);
        }

    private:
        /// <summary>
        /// Element wise multiplication and trapezoidal numerical integration
        /// when input data is equally spaced with increment of 1.
        /// Input vectors should contain at least two items and be equal size.
        /// </summary>
        /// <param name="a"> vector </param>
        /// <param name="b"> vector </param>
        /// <param name="c"> vector </param>
        /// <returns> Approximate integral of fy </returns>
        float integral(const std::vector<float> &a, const std::vector<float> &b,
            const std::vector<float> &c) const
        {
            if (a.size() < 2)
                throw std::invalid_argument("Input vector should contain at least 2 items");

            if (a.size() != b.size() || b.size() != c.size())
                throw std::invalid_argument("Input size mismatch");

            double integral = 0.0; // Enable extra precision
            for (size_t i = 1; i < a.size() - 1; ++i)
            {
                integral += (double)a[i] * b[i] * c[i];
            }

            // Add first and last
            integral += ((double)a.front() * b.front() * c.front() +
                (double)a.back() * b.back() * c.back()) / 2.0;
            return (float)integral;
        }
    };

    // A set of spectra. Alias for convenience.
    using spectra = std::map<std::string, illuminant>;

    struct illuminant_data
    {
        /// <summary>
        /// Get all spectra defined in the file
        /// </summary>
        /// <returns> Collection of spectra </returns>
        spectra get()
        {
            return _spectra;
        }

        /// <summary>
        /// Set the spectrum data
        /// </summary>
        /// <param name="id"> Illuminant id </param>
        /// <param name="spectrum"> Spectrum data </param>
        void set(const std::string &id, illuminant illuminant)
        {
            _spectra[id] = illuminant;
        }

        illuminant_data()
        {
            _spectra["Standard Illuminant A"]   = illuminant(lightsource_type::A,   { _standard_illuminant_a,   _minimum_wl, _maximum_wl });
            _spectra["Standard Illuminant F12"] = illuminant(lightsource_type::F12, { _standard_illuminant_f12, _minimum_wl, _maximum_wl });
            _spectra["Standard Illuminant D50"] = illuminant(lightsource_type::D50, { _standard_illuminant_d50, _minimum_wl, _maximum_wl });
            _spectra["Standard Illuminant D55"] = illuminant(lightsource_type::D55, { _standard_illuminant_d55, _minimum_wl, _maximum_wl });
            _spectra["Standard Illuminant D65"] = illuminant(lightsource_type::D65, { _standard_illuminant_d65, _minimum_wl, _maximum_wl });
            _spectra["Standard Illuminant D75"] = illuminant(lightsource_type::D75, { _standard_illuminant_d75, _minimum_wl, _maximum_wl });
            _spectra["Spectralight A"]          = illuminant(lightsource_type::A,   { _spectralight_a,          _minimum_wl, _maximum_wl });
            _spectra["Spectralight CW"]         = illuminant(lightsource_type::F2,  { _spectralight_cw,         _minimum_wl, _maximum_wl });
            _spectra["Spectralight D65"]        = illuminant(lightsource_type::D65, { _spectralight_d65,        _minimum_wl, _maximum_wl });
            _spectra["Spectralight Horizon"]    = illuminant(lightsource_type::A,   { _spectralight_hor,        _minimum_wl, _maximum_wl });
            _spectra["Spectralight TL84"]       = illuminant(lightsource_type::F10, { _spectralight_tl84,       _minimum_wl, _maximum_wl });
            _spectra["IE A"]                    = illuminant(lightsource_type::A,   { _ie_a,                    _minimum_wl, _maximum_wl });
            _spectra["IE D50"]                  = illuminant(lightsource_type::D50, { _ie_d50,                  _minimum_wl, _maximum_wl });
            _spectra["IE D65"]                  = illuminant(lightsource_type::D65, { _ie_d65,                  _minimum_wl, _maximum_wl });
            _spectra["IE F11"]                  = illuminant(lightsource_type::F11, { _ie_f11,                  _minimum_wl, _maximum_wl });
            _spectra["IE F12"]                  = illuminant(lightsource_type::F12, { _ie_f12,                  _minimum_wl, _maximum_wl });
        }


    private:
        uint16_t _minimum_wl = 360;
        uint16_t _maximum_wl = 780;

        // Spectral power distributions for each illuminant
        // TODO: Add all needed illuminants
        std::vector<float> _standard_illuminant_a      = std::vector<float>{ 6.14462f, 6.29955f, 6.45724f, 6.61774f, 6.78105f, 6.94720f, 7.11621f, 7.28811f, 7.46292f, 7.64066f, 7.82135f, 8.00501f, 8.19167f, 8.38134f, 8.57404f, 8.76980f, 8.96864f, 9.17056f, 9.37561f, 9.58378f, 9.79510f, 10.00960f, 10.22730f, 10.44810f, 10.67220f, 10.89960f, 11.13020f, 11.36400f, 11.60120f, 11.84160f, 12.08530f, 12.33240f, 12.58280f, 12.83660f, 13.09380f, 13.35430f, 13.61820f, 13.88550f, 14.15630f, 14.43040f, 14.70800f, 14.98910f, 15.27360f, 15.56160f, 15.85300f, 16.14800f, 16.44640f, 16.74840f, 17.05380f, 17.36280f, 17.67530f, 17.99130f, 18.31080f, 18.63390f, 18.96050f, 19.29070f, 19.62440f, 19.96170f, 20.30260f, 20.64700f, 20.99500f, 21.34650f, 21.70160f, 22.06030f, 22.42250f, 22.78830f, 23.15770f, 23.53070f, 23.90720f, 24.28730f, 24.67090f, 25.05810f, 25.44890f, 25.84320f, 26.24110f, 26.64250f, 27.04750f, 27.45600f, 27.86810f, 28.28360f, 28.70270f, 29.12530f, 29.55150f, 29.98110f, 30.41420f, 30.85080f, 31.29090f, 31.73450f, 32.18150f, 32.63200f, 33.08590f, 33.54320f, 34.00400f, 34.46820f, 34.93580f, 35.40680f, 35.88110f, 36.35880f, 36.83990f, 37.32430f, 37.81210f, 38.30310f, 38.79750f, 39.29510f, 39.79600f, 40.30020f, 40.80760f, 41.31820f, 41.83200f, 42.34910f, 42.86930f, 43.39260f, 43.91920f, 44.44880f, 44.98160f, 45.51740f, 46.05630f, 46.59830f, 47.14330f, 47.69130f, 48.24230f, 48.79630f, 49.35330f, 49.91320f, 50.47600f, 51.04180f, 51.61040f, 52.18180f, 52.75610f, 53.33320f, 53.91320f, 54.49580f, 55.08130f, 55.66940f, 56.26030f, 56.85390f, 57.45010f, 58.04890f, 58.65040f, 59.25450f, 59.86110f, 60.47030f, 61.08200f, 61.69620f, 62.31280f, 62.93200f, 63.55350f, 64.17750f, 64.80380f, 65.43250f, 66.06350f, 66.69680f, 67.33240f, 67.97020f, 68.61020f, 69.25250f, 69.89690f, 70.54350f, 71.19220f, 71.84300f, 72.49590f, 73.15080f, 73.80770f, 74.46660f, 75.12750f, 75.79030f, 76.45510f, 77.12170f, 77.79020f, 78.46050f, 79.13260f, 79.80650f, 80.48210f, 81.15950f, 81.83860f, 82.51930f, 83.20170f, 83.88560f, 84.57120f, 85.25840f, 85.94700f, 86.63720f, 87.32880f, 88.02190f, 88.71650f, 89.41240f, 90.10970f, 90.80830f, 91.50820f, 92.20950f, 92.91200f, 93.61570f, 94.32060f, 95.02670f, 95.73390f, 96.44230f, 97.15180f, 97.86230f, 98.57390f, 99.28640f, 100.00000f, 100.71500f, 101.43000f, 102.14600f, 102.86400f, 103.58200f, 104.30100f, 105.02000f, 105.74100f, 106.46200f, 107.18400f, 107.90600f, 108.63000f, 109.35400f, 110.07800f, 110.80300f, 111.52900f, 112.25500f, 112.98200f, 113.70900f, 114.43600f, 115.16400f, 115.89300f, 116.62200f, 117.35100f, 118.08000f, 118.81000f, 119.54000f, 120.27000f, 121.00100f, 121.73100f, 122.46200f, 123.19300f, 123.92400f, 124.65500f, 125.38600f, 126.11800f, 126.84900f, 127.58000f, 128.31200f, 129.04300f, 129.77400f, 130.50500f, 131.23600f, 131.96600f, 132.69700f, 133.42700f, 134.15700f, 134.88700f, 135.61700f, 136.34600f, 137.07500f, 137.80400f, 138.53200f, 139.26000f, 139.98800f, 140.71500f, 141.44100f, 142.16700f, 142.89300f, 143.61800f, 144.34300f, 145.06700f, 145.79000f, 146.51300f, 147.23500f, 147.95700f, 148.67800f, 149.39800f, 150.11700f, 150.83600f, 151.55400f, 152.27100f, 152.98800f, 153.70400f, 154.41800f, 155.13200f, 155.84500f, 156.55800f, 157.26900f, 157.97900f, 158.68900f, 159.39700f, 160.10400f, 160.81100f, 161.51600f, 162.22100f, 162.92400f, 163.62600f, 164.32700f, 165.02800f, 165.72600f, 166.42400f, 167.12100f, 167.81600f, 168.51000f, 169.20300f, 169.89500f, 170.58600f, 171.27500f, 171.96300f, 172.65000f, 173.33500f, 174.01900f, 174.70200f, 175.38300f, 176.06300f, 176.74100f, 177.41900f, 178.09400f, 178.76900f, 179.44100f, 180.11300f, 180.78300f, 181.45100f, 182.11800f, 182.78300f, 183.44700f, 184.10900f, 184.77000f, 185.42900f, 186.08700f, 186.74300f, 187.39700f, 188.05000f, 188.70100f, 189.35000f, 189.99800f, 190.64400f, 191.28800f, 191.93100f, 192.57200f, 193.21100f, 193.84900f, 194.48400f, 195.11800f, 195.75000f, 196.38100f, 197.00900f, 197.63600f, 198.26100f, 198.88400f, 199.50600f, 200.12500f, 200.74300f, 201.35900f, 201.97200f, 202.58400f, 203.19500f, 203.80300f, 204.40900f, 205.01300f, 205.61600f, 206.21600f, 206.81500f, 207.41100f, 208.00600f, 208.59900f, 209.18900f, 209.77800f, 210.36500f, 210.94900f, 211.53200f, 212.11200f, 212.69100f, 213.26800f, 213.84200f, 214.41500f, 214.98500f, 215.55300f, 216.12000f, 216.68400f, 217.24600f, 217.80600f, 218.36400f, 218.92000f, 219.47300f, 220.02500f, 220.57400f, 221.12200f, 221.66700f, 222.21000f, 222.75100f, 223.29000f, 223.82600f, 224.36100f, 224.89300f, 225.42300f, 225.95100f, 226.47700f, 227.00000f, 227.52200f, 228.04100f, 228.55800f, 229.07300f, 229.58500f, 230.09600f, 230.60400f, 231.11000f, 231.61400f, 232.11500f, 232.61500f, 233.11200f, 233.60600f, 234.09900f, 234.58900f, 235.07800f, 235.56400f, 236.04700f, 236.52900f, 237.00800f, 237.48500f, 237.95900f, 238.43200f, 238.90200f, 239.37000f, 239.83600f, 240.29900f, 240.76000f, 241.21900f, 241.67500f, 242.13000f, 242.58200f, 243.03100f, 243.47900f, 243.92400f, 244.36700f, 244.80800f, 245.24600f, 245.68200f, 246.11600f, 246.54800f, 246.97700f, 247.40400f, 247.82900f, 248.25100f, 248.67100f, 249.08900f, 249.50500f, 249.91800f, 250.32900f, 250.73800f, 251.14400f, 251.54800f, 251.95000f, 252.35000f, 252.74700f, 253.14200f, 253.53500f, 253.92500f, 254.31400f, 254.70000f, 255.08300f, 255.46500f, 255.84400f, 256.22100f, 256.59500f, 256.96800f, 257.33800f, 257.70600f, 258.07100f, 258.43400f, 258.79500f, 259.15400f, 259.51100f, 259.86500f, 260.21700f, 260.56700f, 260.91400f, 261.25900f, 261.60200f };
        std::vector<float> _standard_illuminant_f12    = std::vector<float>{ 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.96000f, 0.89600f, 0.83200f, 0.76800f, 0.70400f, 0.64000f, 0.60200f, 0.56400f, 0.52600f, 0.48800f, 0.45000f, 0.42600f, 0.40200f, 0.37800f, 0.35400f, 0.33000f, 0.50200f, 0.67400f, 0.84600f, 1.01800f, 1.19000f, 3.44800f, 5.70600f, 7.96400f, 10.22200f, 12.48000f, 10.20800f, 7.93600f, 5.66400f, 3.39200f, 1.12000f, 1.08400f, 1.04800f, 1.01200f, 0.97600f, 0.94000f, 0.96800f, 0.99600f, 1.02400f, 1.05200f, 1.08000f, 1.13800f, 1.19600f, 1.25400f, 1.31200f, 1.37000f, 1.45200f, 1.53400f, 1.61600f, 1.69800f, 1.78000f, 7.23400f, 12.68800f, 18.14200f, 23.59600f, 29.05000f, 24.82000f, 20.59000f, 16.36000f, 12.13000f, 7.90000f, 6.85000f, 5.80000f, 4.75000f, 3.70000f, 2.65000f, 2.66200f, 2.67400f, 2.68600f, 2.69800f, 2.71000f, 2.69800f, 2.68600f, 2.67400f, 2.66200f, 2.65000f, 2.61800f, 2.58600f, 2.55400f, 2.52200f, 2.49000f, 2.45800f, 2.42600f, 2.39400f, 2.36200f, 2.33000f, 2.28400f, 2.23800f, 2.19200f, 2.14600f, 2.10000f, 2.06200f, 2.02400f, 1.98600f, 1.94800f, 1.91000f, 2.13000f, 2.35000f, 2.57000f, 2.79000f, 3.01000f, 4.57400f, 6.13800f, 7.70200f, 9.26600f, 10.83000f, 11.04000f, 11.25000f, 11.46000f, 11.67000f, 11.88000f, 10.88000f, 9.88000f, 8.88000f, 7.88000f, 6.88000f, 6.19000f, 5.50000f, 4.81000f, 4.12000f, 3.43000f, 3.04200f, 2.65400f, 2.26600f, 1.87800f, 1.49000f, 1.37600f, 1.26200f, 1.14800f, 1.03400f, 0.92000f, 0.87800f, 0.83600f, 0.79400f, 0.75200f, 0.71000f, 0.68800f, 0.66600f, 0.64400f, 0.62200f, 0.60000f, 0.60600f, 0.61200f, 0.61800f, 0.62400f, 0.63000f, 0.72400f, 0.81800f, 0.91200f, 1.00600f, 1.10000f, 1.79200f, 2.48400f, 3.17600f, 3.86800f, 4.56000f, 10.52800f, 16.49600f, 22.46400f, 28.43200f, 34.40000f, 40.60000f, 46.80000f, 53.00000f, 59.20000f, 65.40000f, 58.21600f, 51.03200f, 43.84800f, 36.66400f, 29.48000f, 25.01600f, 20.55200f, 16.08800f, 11.62400f, 7.16000f, 6.34400f, 5.52800f, 4.71200f, 3.89600f, 3.08000f, 2.95800f, 2.83600f, 2.71400f, 2.59200f, 2.47000f, 2.43000f, 2.39000f, 2.35000f, 2.31000f, 2.27000f, 2.83400f, 3.39800f, 3.96200f, 4.52600f, 5.09000f, 6.46400f, 7.83800f, 9.21200f, 10.58600f, 11.96000f, 12.63200f, 13.30400f, 13.97600f, 14.64800f, 15.32000f, 15.11000f, 14.90000f, 14.69000f, 14.48000f, 14.27000f, 13.78800f, 13.30600f, 12.82400f, 12.34200f, 11.86000f, 11.34400f, 10.82800f, 10.31200f, 9.79600f, 9.28000f, 9.88600f, 10.49200f, 11.09800f, 11.70400f, 12.31000f, 23.55400f, 34.79800f, 46.04200f, 57.28600f, 68.53000f, 65.42800f, 62.32600f, 59.22400f, 56.12200f, 53.02000f, 45.35000f, 37.68000f, 30.01000f, 22.34000f, 14.67000f, 14.61200f, 14.55400f, 14.49600f, 14.43800f, 14.38000f, 14.44600f, 14.51200f, 14.57800f, 14.64400f, 14.71000f, 13.06000f, 11.41000f, 9.76000f, 8.11000f, 6.46000f, 5.68200f, 4.90400f, 4.12600f, 3.34800f, 2.57000f, 2.60600f, 2.64200f, 2.67800f, 2.71400f, 2.75000f, 3.03600f, 3.32200f, 3.60800f, 3.89400f, 4.18000f, 4.03200f, 3.88400f, 3.73600f, 3.58800f, 3.44000f, 3.31400f, 3.18800f, 3.06200f, 2.93600f, 2.81000f, 2.73200f, 2.65400f, 2.57600f, 2.49800f, 2.42000f, 2.26400f, 2.10800f, 1.95200f, 1.79600f, 1.64000f, 1.58400f, 1.52800f, 1.47200f, 1.41600f, 1.36000f, 1.38600f, 1.41200f, 1.43800f, 1.46400f, 1.49000f, 1.62000f, 1.75000f, 1.88000f, 2.01000f, 2.14000f, 2.18000f, 2.22000f, 2.26000f, 2.30000f, 2.34000f, 2.15600f, 1.97200f, 1.78800f, 1.60400f, 1.42000f, 1.45800f, 1.49600f, 1.53400f, 1.57200f, 1.61000f, 2.29600f, 2.98200f, 3.66800f, 4.35400f, 5.04000f, 5.42800f, 5.81600f, 6.20400f, 6.59200f, 6.98000f, 6.22200f, 5.46400f, 4.70600f, 3.94800f, 3.19000f, 2.69400f, 2.19800f, 1.70200f, 1.20600f, 0.71000f, 0.62800f, 0.54600f, 0.46400f, 0.38200f, 0.30000f, 0.29200f, 0.28400f, 0.27600f, 0.26800f, 0.26000f, 0.25400f, 0.24800f, 0.24200f, 0.23600f, 0.23000f, 0.24000f, 0.25000f, 0.26000f, 0.27000f, 0.28000f, 0.28000f, 0.28000f, 0.28000f, 0.28000f, 0.28000f, 0.26600f, 0.25200f, 0.23800f, 0.22400f, 0.21000f, 0.20200f, 0.19400f, 0.18600f, 0.17800f, 0.17000f, 0.17800f, 0.18600f, 0.19400f, 0.20200f, 0.21000f, 0.20600f, 0.20200f, 0.19800f, 0.19400f, 0.19000f, 0.18200f, 0.17400f, 0.16600f, 0.15800f, 0.15000f, 0.14000f, 0.13000f, 0.12000f, 0.11000f, 0.10000f, 0.09000f, 0.08000f, 0.07000f, 0.06000f, 0.05000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f };
        std::vector<float> _standard_illuminant_d50    = std::vector<float>{ 23.92051f, 24.11820f, 24.31589f, 24.51359f, 24.71128f, 24.90897f, 25.10666f, 25.30436f, 25.50205f, 25.69974f, 25.89744f, 25.75341f, 25.60938f, 25.46535f, 25.32132f, 25.17729f, 25.03326f, 24.88923f, 24.74521f, 24.60118f, 24.45715f, 24.99517f, 25.53320f, 26.07123f, 26.60925f, 27.14728f, 27.68531f, 28.22333f, 28.76136f, 29.29939f, 29.83741f, 31.77942f, 33.72143f, 35.66343f, 37.60544f, 39.54744f, 41.48945f, 43.43145f, 45.37346f, 47.31547f, 49.25747f, 49.97785f, 50.69823f, 51.41861f, 52.13899f, 52.85936f, 53.57974f, 54.30012f, 55.02050f, 55.74088f, 56.46126f, 56.81354f, 57.16582f, 57.51811f, 57.87039f, 58.22268f, 58.57496f, 58.92725f, 59.27953f, 59.63182f, 59.98410f, 59.76302f, 59.54193f, 59.32085f, 59.09977f, 58.87869f, 58.65760f, 58.43652f, 58.21544f, 57.99435f, 57.77327f, 59.47354f, 61.17381f, 62.87408f, 64.57435f, 66.27462f, 67.97489f, 69.67516f, 71.37543f, 73.07570f, 74.77597f, 76.01818f, 77.26039f, 78.50259f, 79.74480f, 80.98700f, 82.22921f, 83.47142f, 84.71362f, 85.95583f, 87.19803f, 87.53492f, 87.87182f, 88.20871f, 88.54560f, 88.88249f, 89.21938f, 89.55627f, 89.89316f, 90.23005f, 90.56694f, 90.64311f, 90.71928f, 90.79545f, 90.87161f, 90.94778f, 91.02395f, 91.10012f, 91.17629f, 91.25245f, 91.32862f, 91.70305f, 92.07748f, 92.45190f, 92.82633f, 93.20075f, 93.57518f, 93.94961f, 94.32403f, 94.69846f, 95.07289f, 94.75905f, 94.44522f, 94.13138f, 93.81754f, 93.50371f, 93.18987f, 92.87603f, 92.56220f, 92.24836f, 91.93453f, 92.31116f, 92.68778f, 93.06441f, 93.44104f, 93.81767f, 94.19430f, 94.57093f, 94.94756f, 95.32418f, 95.70081f, 95.79017f, 95.87952f, 95.96888f, 96.05823f, 96.14759f, 96.23694f, 96.32630f, 96.41566f, 96.50501f, 96.59437f, 96.64647f, 96.69857f, 96.75067f, 96.80277f, 96.85487f, 96.90697f, 96.95907f, 97.01117f, 97.06327f, 97.11537f, 97.61272f, 98.11007f, 98.60743f, 99.10478f, 99.60213f, 100.09948f, 100.59683f, 101.09419f, 101.59154f, 102.08889f, 101.95484f, 101.82078f, 101.68673f, 101.55268f, 101.41862f, 101.28457f, 101.15052f, 101.01647f, 100.88241f, 100.74836f, 100.90491f, 101.06146f, 101.21801f, 101.37456f, 101.53111f, 101.68766f, 101.84421f, 102.00076f, 102.15731f, 102.31386f, 102.08248f, 101.85109f, 101.61970f, 101.38832f, 101.15693f, 100.92554f, 100.69416f, 100.46277f, 100.23139f, 100.00000f, 99.77375f, 99.54749f, 99.32124f, 99.09498f, 98.86873f, 98.64247f, 98.41622f, 98.18996f, 97.96371f, 97.73745f, 97.85606f, 97.97468f, 98.09329f, 98.21191f, 98.33052f, 98.44913f, 98.56775f, 98.68636f, 98.80498f, 98.92359f, 98.38225f, 97.84092f, 97.29959f, 96.75825f, 96.21692f, 95.67558f, 95.13425f, 94.59292f, 94.05158f, 93.51025f, 93.92980f, 94.34935f, 94.76890f, 95.18845f, 95.60800f, 96.02755f, 96.44710f, 96.86665f, 97.28620f, 97.70575f, 97.86436f, 98.02297f, 98.18158f, 98.34019f, 98.49880f, 98.65741f, 98.81601f, 98.97462f, 99.13323f, 99.29184f, 99.26945f, 99.24706f, 99.22467f, 99.20228f, 99.17989f, 99.15750f, 99.13511f, 99.11272f, 99.09033f, 99.06794f, 98.73622f, 98.40449f, 98.07276f, 97.74104f, 97.40931f, 97.07758f, 96.74586f, 96.41413f, 96.08240f, 95.75068f, 96.06495f, 96.37923f, 96.69350f, 97.00778f, 97.32206f, 97.63633f, 97.95061f, 98.26489f, 98.57916f, 98.89344f, 98.57464f, 98.25583f, 97.93703f, 97.61823f, 97.29943f, 96.98063f, 96.66183f, 96.34302f, 96.02422f, 95.70542f, 95.95830f, 96.21117f, 96.46405f, 96.71692f, 96.96980f, 97.22267f, 97.47555f, 97.72843f, 97.98130f, 98.23418f, 98.71619f, 99.19821f, 99.68022f, 100.16223f, 100.64425f, 101.12626f, 101.60828f, 102.09029f, 102.57230f, 103.05432f, 102.66738f, 102.28045f, 101.89351f, 101.50657f, 101.11964f, 100.73270f, 100.34576f, 99.95883f, 99.57189f, 99.18495f, 98.00888f, 96.83280f, 95.65672f, 94.48064f, 93.30457f, 92.12849f, 90.95241f, 89.77633f, 88.60026f, 87.42418f, 87.84705f, 88.26993f, 88.69281f, 89.11568f, 89.53856f, 89.96143f, 90.38431f, 90.80718f, 91.23006f, 91.65293f, 91.78100f, 91.90906f, 92.03713f, 92.16519f, 92.29326f, 92.42132f, 92.54938f, 92.67745f, 92.80551f, 92.93358f, 91.32936f, 89.72514f, 88.12093f, 86.51671f, 84.91250f, 83.30828f, 81.70406f, 80.09985f, 78.49563f, 76.89141f, 77.85742f, 78.82343f, 79.78944f, 80.75544f, 81.72145f, 82.68746f, 83.65346f, 84.61947f, 85.58548f, 86.55149f, 87.15856f, 87.76563f, 88.37270f, 88.97977f, 89.58684f, 90.19391f, 90.80098f, 91.40805f, 92.01512f, 92.62219f, 91.18651f, 89.75083f, 88.31515f, 86.87947f, 85.44379f, 84.00811f, 82.57243f, 81.13675f, 79.70107f, 78.26539f, 76.21077f, 74.15615f, 72.10154f, 70.04692f, 67.99230f, 65.93768f, 63.88307f, 61.82845f, 59.77383f, 57.71922f, 60.24351f, 62.76780f, 65.29209f, 67.81638f, 70.34067f, 72.86496f, 75.38925f, 77.91354f, 80.43783f, 82.96212f, 82.49692f, 82.03171f, 81.56651f, 81.10130f, 80.63610f, 80.17089f, 79.70568f, 79.24048f, 78.77527f, 78.31007f, 78.43820f, 78.56634f, 78.69447f, 78.82261f, 78.95074f, 79.07888f, 79.20701f, 79.33515f, 79.46328f, 79.59141f, 78.97581f, 78.36020f, 77.74460f, 77.12899f, 76.51338f, 75.89778f, 75.28217f, 74.66656f, 74.05096f, 73.43535f, 72.48674f, 71.53813f, 70.58952f, 69.64091f, 68.69230f, 67.74369f, 66.79508f, 65.84647f, 64.89786f, 63.94925f, 64.63526f, 65.32127f, 66.00727f, 66.69328f, 67.37929f, 68.06529f, 68.75130f, 69.43731f, 70.12332f, 70.80932f, 71.17599f, 71.54266f, 71.90933f, 72.27600f, 72.64267f, 73.00934f, 73.37601f, 73.74268f, 74.10935f, 74.47602f };
        std::vector<float> _standard_illuminant_d55    = std::vector<float>{ 30.58362f, 30.87337f, 31.16311f, 31.45286f, 31.74261f, 32.03235f, 32.32210f, 32.61185f, 32.90159f, 33.19134f, 33.48109f, 33.38696f, 33.29284f, 33.19871f, 33.10458f, 33.01046f, 32.91633f, 32.82221f, 32.72808f, 32.63395f, 32.53983f, 33.09021f, 33.64060f, 34.19099f, 34.74138f, 35.29176f, 35.84215f, 36.39254f, 36.94292f, 37.49331f, 38.04370f, 40.32811f, 42.61252f, 44.89694f, 47.18135f, 49.46576f, 51.75018f, 54.03459f, 56.31900f, 58.60342f, 60.88783f, 61.64807f, 62.40831f, 63.16855f, 63.92879f, 64.68903f, 65.44927f, 66.20950f, 66.96974f, 67.72998f, 68.49022f, 68.79285f, 69.09548f, 69.39811f, 69.70074f, 70.00337f, 70.30599f, 70.60862f, 70.91125f, 71.21388f, 71.51651f, 71.15099f, 70.78547f, 70.41995f, 70.05443f, 69.68891f, 69.32338f, 68.95786f, 68.59234f, 68.22682f, 67.86130f, 69.63011f, 71.39892f, 73.16772f, 74.93653f, 76.70534f, 78.47414f, 80.24295f, 82.01176f, 83.78056f, 85.54937f, 86.78814f, 88.02691f, 89.26568f, 90.50444f, 91.74321f, 92.98198f, 94.22075f, 95.45952f, 96.69829f, 97.93706f, 98.18459f, 98.43213f, 98.67967f, 98.92721f, 99.17474f, 99.42228f, 99.66982f, 99.91736f, 100.16490f, 100.41243f, 100.35811f, 100.30378f, 100.24945f, 100.19512f, 100.14079f, 100.08646f, 100.03213f, 99.97781f, 99.92348f, 99.86915f, 100.15223f, 100.43531f, 100.71839f, 101.00148f, 101.28456f, 101.56764f, 101.85072f, 102.13380f, 102.41688f, 102.69997f, 102.23460f, 101.76923f, 101.30386f, 100.83849f, 100.37312f, 99.90776f, 99.44239f, 98.97702f, 98.51165f, 98.04628f, 98.30709f, 98.56790f, 98.82871f, 99.08953f, 99.35034f, 99.61115f, 99.87196f, 100.13277f, 100.39358f, 100.65439f, 100.65638f, 100.65838f, 100.66037f, 100.66236f, 100.66436f, 100.66635f, 100.66835f, 100.67034f, 100.67233f, 100.67433f, 100.60409f, 100.53385f, 100.46361f, 100.39338f, 100.32314f, 100.25290f, 100.18266f, 100.11242f, 100.04218f, 99.97195f, 100.39462f, 100.81730f, 101.23998f, 101.66265f, 102.08533f, 102.50801f, 102.93069f, 103.35336f, 103.77604f, 104.19872f, 103.98835f, 103.77799f, 103.56762f, 103.35726f, 103.14689f, 102.93653f, 102.72616f, 102.51580f, 102.30543f, 102.09507f, 102.18202f, 102.26897f, 102.35592f, 102.44287f, 102.52982f, 102.61677f, 102.70372f, 102.79067f, 102.87762f, 102.96457f, 102.66811f, 102.37166f, 102.07520f, 101.77874f, 101.48229f, 101.18583f, 100.88937f, 100.59291f, 100.29646f, 100.00000f, 99.72191f, 99.44381f, 99.16572f, 98.88763f, 98.60953f, 98.33144f, 98.05335f, 97.77525f, 97.49716f, 97.21907f, 97.27261f, 97.32615f, 97.37969f, 97.43324f, 97.48678f, 97.54032f, 97.59387f, 97.64741f, 97.70095f, 97.75449f, 97.12323f, 96.49197f, 95.86071f, 95.22945f, 94.59819f, 93.96693f, 93.33567f, 92.70441f, 92.07315f, 91.44188f, 91.74125f, 92.04062f, 92.33998f, 92.63935f, 92.93871f, 93.23808f, 93.53745f, 93.83681f, 94.13618f, 94.43554f, 94.50805f, 94.58055f, 94.65305f, 94.72556f, 94.79806f, 94.87056f, 94.94307f, 95.01557f, 95.08807f, 95.16057f, 95.06894f, 94.97730f, 94.88567f, 94.79403f, 94.70240f, 94.61076f, 94.51913f, 94.42749f, 94.33586f, 94.24422f, 93.86718f, 93.49013f, 93.11309f, 92.73604f, 92.35900f, 91.98195f, 91.60491f, 91.22786f, 90.85082f, 90.47377f, 90.66260f, 90.85143f, 91.04025f, 91.22908f, 91.41790f, 91.60673f, 91.79556f, 91.98438f, 92.17321f, 92.36204f, 92.01459f, 91.66714f, 91.31969f, 90.97224f, 90.62479f, 90.27734f, 89.92989f, 89.58244f, 89.23499f, 88.88754f, 89.03436f, 89.18119f, 89.32801f, 89.47484f, 89.62166f, 89.76849f, 89.91531f, 90.06214f, 90.20896f, 90.35579f, 90.71961f, 91.08343f, 91.44725f, 91.81107f, 92.17489f, 92.53872f, 92.90254f, 93.26636f, 93.63018f, 93.99400f, 93.59474f, 93.19547f, 92.79620f, 92.39693f, 91.99766f, 91.59839f, 91.19912f, 90.79985f, 90.40059f, 90.00132f, 88.97263f, 87.94393f, 86.91524f, 85.88655f, 84.85786f, 83.82917f, 82.80047f, 81.77178f, 80.74309f, 79.71440f, 80.03122f, 80.34805f, 80.66487f, 80.98170f, 81.29852f, 81.61535f, 81.93217f, 82.24900f, 82.56582f, 82.88264f, 83.08268f, 83.28272f, 83.48276f, 83.68280f, 83.88284f, 84.08287f, 84.28291f, 84.48295f, 84.68299f, 84.88303f, 83.42148f, 81.95993f, 80.49838f, 79.03682f, 77.57527f, 76.11372f, 74.65217f, 73.19062f, 71.72907f, 70.26752f, 71.17443f, 72.08134f, 72.98825f, 73.89516f, 74.80208f, 75.70899f, 76.61590f, 77.52281f, 78.42972f, 79.33663f, 79.90600f, 80.47536f, 81.04473f, 81.61409f, 82.18346f, 82.75282f, 83.32219f, 83.89155f, 84.46092f, 85.03028f, 83.71841f, 82.40654f, 81.09468f, 79.78281f, 78.47094f, 77.15907f, 75.84720f, 74.53534f, 73.22347f, 71.91160f, 70.00219f, 68.09277f, 66.18336f, 64.27394f, 62.36453f, 60.45512f, 58.54570f, 56.63629f, 54.72687f, 52.81746f, 55.13183f, 57.44620f, 59.76057f, 62.07494f, 64.38932f, 66.70369f, 69.01806f, 71.33243f, 73.64680f, 75.96117f, 75.54999f, 75.13880f, 74.72762f, 74.31643f, 73.90525f, 73.49407f, 73.08288f, 72.67170f, 72.26051f, 71.84933f, 71.96115f, 72.07297f, 72.18479f, 72.29661f, 72.40842f, 72.52024f, 72.63206f, 72.74388f, 72.85570f, 72.96752f, 72.40847f, 71.84943f, 71.29038f, 70.73133f, 70.17228f, 69.61324f, 69.05419f, 68.49514f, 67.93609f, 67.37704f, 66.51454f, 65.65204f, 64.78954f, 63.92703f, 63.06453f, 62.20203f, 61.33952f, 60.47702f, 59.61452f, 58.75201f, 59.37892f, 60.00584f, 60.63275f, 61.25966f, 61.88657f, 62.51348f, 63.14039f, 63.76730f, 64.39421f, 65.02112f, 65.35263f, 65.68413f, 66.01563f, 66.34713f, 66.67863f, 67.01013f, 67.34164f, 67.67314f, 68.00464f, 68.33614f };
        std::vector<float> _standard_illuminant_d65    = std::vector<float>{ 46.63830f, 47.18340f, 47.72850f, 48.27350f, 48.81860f, 49.36370f, 49.90880f, 50.45390f, 50.99890f, 51.54400f, 52.08910f, 51.87770f, 51.66640f, 51.45500f, 51.24370f, 51.03230f, 50.82090f, 50.60960f, 50.39820f, 50.18690f, 49.97550f, 50.44280f, 50.91000f, 51.37730f, 51.84460f, 52.31180f, 52.77910f, 53.24640f, 53.71370f, 54.18090f, 54.64820f, 57.45890f, 60.26950f, 63.08020f, 65.89090f, 68.70150f, 71.51220f, 74.32290f, 77.13360f, 79.94420f, 82.75490f, 83.62800f, 84.50110f, 85.37420f, 86.24730f, 87.12040f, 87.99360f, 88.86670f, 89.73980f, 90.61290f, 91.48600f, 91.68060f, 91.87520f, 92.06970f, 92.26430f, 92.45890f, 92.65350f, 92.84810f, 93.04260f, 93.23720f, 93.43180f, 92.75680f, 92.08190f, 91.40690f, 90.73200f, 90.05700f, 89.38210f, 88.70710f, 88.03220f, 87.35720f, 86.68230f, 88.50060f, 90.31880f, 92.13710f, 93.95540f, 95.77360f, 97.59190f, 99.41020f, 101.22800f, 103.04700f, 104.86500f, 106.07900f, 107.29400f, 108.50800f, 109.72200f, 110.93600f, 112.15100f, 113.36500f, 114.57900f, 115.79400f, 117.00800f, 117.08800f, 117.16900f, 117.24900f, 117.33000f, 117.41000f, 117.49000f, 117.57100f, 117.65100f, 117.73200f, 117.81200f, 117.51700f, 117.22200f, 116.92700f, 116.63200f, 116.33600f, 116.04100f, 115.74600f, 115.45100f, 115.15600f, 114.86100f, 114.96700f, 115.07300f, 115.18000f, 115.28600f, 115.39200f, 115.49800f, 115.60400f, 115.71100f, 115.81700f, 115.92300f, 115.21200f, 114.50100f, 113.78900f, 113.07800f, 112.36700f, 111.65600f, 110.94500f, 110.23300f, 109.52200f, 108.81100f, 108.86500f, 108.92000f, 108.97400f, 109.02800f, 109.08200f, 109.13700f, 109.19100f, 109.24500f, 109.30000f, 109.35400f, 109.19900f, 109.04400f, 108.88800f, 108.73300f, 108.57800f, 108.42300f, 108.26800f, 108.11200f, 107.95700f, 107.80200f, 107.50100f, 107.20000f, 106.89800f, 106.59700f, 106.29600f, 105.99500f, 105.69400f, 105.39200f, 105.09100f, 104.79000f, 105.08000f, 105.37000f, 105.66000f, 105.95000f, 106.23900f, 106.52900f, 106.81900f, 107.10900f, 107.39900f, 107.68900f, 107.36100f, 107.03200f, 106.70400f, 106.37500f, 106.04700f, 105.71900f, 105.39000f, 105.06200f, 104.73300f, 104.40500f, 104.36900f, 104.33300f, 104.29700f, 104.26100f, 104.22500f, 104.19000f, 104.15400f, 104.11800f, 104.08200f, 104.04600f, 103.64100f, 103.23700f, 102.83200f, 102.42800f, 102.02300f, 101.61800f, 101.21400f, 100.80900f, 100.40500f, 100.00000f, 99.63340f, 99.26680f, 98.90030f, 98.53370f, 98.16710f, 97.80050f, 97.43390f, 97.06740f, 96.70080f, 96.33420f, 96.27960f, 96.22500f, 96.17030f, 96.11570f, 96.06110f, 96.00650f, 95.95190f, 95.89720f, 95.84260f, 95.78800f, 95.07780f, 94.36750f, 93.65730f, 92.94700f, 92.23680f, 91.52660f, 90.81630f, 90.10610f, 89.39580f, 88.68560f, 88.81770f, 88.94970f, 89.08180f, 89.21380f, 89.34590f, 89.47800f, 89.61000f, 89.74210f, 89.87410f, 90.00620f, 89.96550f, 89.92480f, 89.88410f, 89.84340f, 89.80260f, 89.76190f, 89.72120f, 89.68050f, 89.63980f, 89.59910f, 89.40910f, 89.21900f, 89.02900f, 88.83890f, 88.64890f, 88.45890f, 88.26880f, 88.07880f, 87.88870f, 87.69870f, 87.25770f, 86.81670f, 86.37570f, 85.93470f, 85.49360f, 85.05260f, 84.61160f, 84.17060f, 83.72960f, 83.28860f, 83.32970f, 83.37070f, 83.41180f, 83.45280f, 83.49390f, 83.53500f, 83.57600f, 83.61710f, 83.65810f, 83.69920f, 83.33200f, 82.96470f, 82.59750f, 82.23020f, 81.86300f, 81.49580f, 81.12850f, 80.76130f, 80.39400f, 80.02680f, 80.04560f, 80.06440f, 80.08310f, 80.10190f, 80.12070f, 80.13950f, 80.15830f, 80.17700f, 80.19580f, 80.21460f, 80.42090f, 80.62720f, 80.83360f, 81.03990f, 81.24620f, 81.45250f, 81.65880f, 81.86520f, 82.07150f, 82.27780f, 81.87840f, 81.47910f, 81.07970f, 80.68040f, 80.28100f, 79.88160f, 79.48230f, 79.08290f, 78.68360f, 78.28420f, 77.42790f, 76.57160f, 75.71530f, 74.85900f, 74.00270f, 73.14650f, 72.29020f, 71.43390f, 70.57760f, 69.72130f, 69.91010f, 70.09890f, 70.28760f, 70.47640f, 70.66520f, 70.85400f, 71.04280f, 71.23150f, 71.42030f, 71.60910f, 71.88310f, 72.15710f, 72.43110f, 72.70510f, 72.97900f, 73.25300f, 73.52700f, 73.80100f, 74.07500f, 74.34900f, 73.07450f, 71.80000f, 70.52550f, 69.25100f, 67.97650f, 66.70200f, 65.42750f, 64.15300f, 62.87850f, 61.60400f, 62.43220f, 63.26030f, 64.08850f, 64.91660f, 65.74480f, 66.57300f, 67.40110f, 68.22930f, 69.05740f, 69.88560f, 70.40570f, 70.92590f, 71.44600f, 71.96620f, 72.48630f, 73.00640f, 73.52660f, 74.04670f, 74.56690f, 75.08700f, 73.93760f, 72.78810f, 71.63870f, 70.48930f, 69.33980f, 68.19040f, 67.04100f, 65.89160f, 64.74210f, 63.59270f, 61.87520f, 60.15780f, 58.44030f, 56.72290f, 55.00540f, 53.28800f, 51.57050f, 49.85310f, 48.13560f, 46.41820f, 48.45690f, 50.49560f, 52.53440f, 54.57310f, 56.61180f, 58.65050f, 60.68920f, 62.72800f, 64.76670f, 66.80540f, 66.46310f, 66.12090f, 65.77860f, 65.43640f, 65.09410f, 64.75180f, 64.40960f, 64.06730f, 63.72510f, 63.38280f, 63.47490f, 63.56700f, 63.65920f, 63.75130f, 63.84340f, 63.93550f, 64.02760f, 64.11980f, 64.21190f, 64.30400f, 63.81880f, 63.33360f, 62.84840f, 62.36320f, 61.87790f, 61.39270f, 60.90750f, 60.42230f, 59.93710f, 59.45190f, 58.70260f, 57.95330f, 57.20400f, 56.45470f, 55.70540f, 54.95620f, 54.20690f, 53.45760f, 52.70830f, 51.95900f, 52.50720f, 53.05530f, 53.60350f, 54.15160f, 54.69980f, 55.24800f, 55.79610f, 56.34430f, 56.89240f, 57.44060f, 57.72780f, 58.01500f, 58.30220f, 58.58940f, 58.87650f, 59.16370f, 59.45090f, 59.73810f, 60.02530f, 60.31250f };
        std::vector<float> _standard_illuminant_d75    = std::vector<float>{ 62.92838f, 63.67512f, 64.42186f, 65.16860f, 65.91534f, 66.66207f, 67.40881f, 68.15555f, 68.90229f, 69.64903f, 70.39577f, 70.02099f, 69.64621f, 69.27144f, 68.89666f, 68.52189f, 68.14711f, 67.77233f, 67.39756f, 67.02278f, 66.64800f, 66.97454f, 67.30107f, 67.62761f, 67.95414f, 68.28067f, 68.60721f, 68.93374f, 69.26028f, 69.58681f, 69.91335f, 73.10874f, 76.30412f, 79.49951f, 82.69490f, 85.89029f, 89.08568f, 92.28107f, 95.47646f, 98.67185f, 101.86724f, 102.86328f, 103.85932f, 104.85537f, 105.85141f, 106.84745f, 107.84349f, 108.83954f, 109.83558f, 110.83162f, 111.82766f, 111.91840f, 112.00914f, 112.09988f, 112.19062f, 112.28136f, 112.37210f, 112.46284f, 112.55358f, 112.64432f, 112.73506f, 111.76542f, 110.79578f, 109.82615f, 108.85651f, 107.88687f, 106.91723f, 105.94760f, 104.97796f, 104.00832f, 103.03869f, 104.84933f, 106.65998f, 108.47063f, 110.28127f, 112.09192f, 113.90257f, 115.71321f, 117.52386f, 119.33451f, 121.14515f, 122.32646f, 123.50777f, 124.68909f, 125.87040f, 127.05171f, 128.23302f, 129.41433f, 130.59564f, 131.77696f, 132.95827f, 132.89329f, 132.82831f, 132.76333f, 132.69835f, 132.63337f, 132.56839f, 132.50340f, 132.43842f, 132.37344f, 132.30846f, 131.80578f, 131.30310f, 130.80042f, 130.29774f, 129.79506f, 129.29238f, 128.78970f, 128.28702f, 127.78434f, 127.28166f, 127.22997f, 127.17828f, 127.12659f, 127.07490f, 127.02322f, 126.97153f, 126.91984f, 126.86815f, 126.81646f, 126.76477f, 125.86368f, 124.96258f, 124.06148f, 123.16039f, 122.25929f, 121.35819f, 120.45709f, 119.55600f, 118.65490f, 117.75380f, 117.63501f, 117.51622f, 117.39742f, 117.27863f, 117.15983f, 117.04104f, 116.92225f, 116.80345f, 116.68466f, 116.56587f, 116.27759f, 115.98932f, 115.70105f, 115.41278f, 115.12451f, 114.83623f, 114.54796f, 114.25969f, 113.97142f, 113.68314f, 113.17950f, 112.67585f, 112.17221f, 111.66856f, 111.16492f, 110.66127f, 110.15763f, 109.65398f, 109.15034f, 108.64669f, 108.82560f, 109.00450f, 109.18341f, 109.36232f, 109.54122f, 109.72013f, 109.89904f, 110.07794f, 110.25685f, 110.43576f, 110.02048f, 109.60520f, 109.18993f, 108.77465f, 108.35938f, 107.94410f, 107.52882f, 107.11355f, 106.69827f, 106.28299f, 106.14477f, 106.00655f, 105.86833f, 105.73011f, 105.59189f, 105.45366f, 105.31544f, 105.17722f, 105.03900f, 104.90078f, 104.41070f, 103.92062f, 103.43054f, 102.94047f, 102.45039f, 101.96031f, 101.47023f, 100.98016f, 100.49008f, 100.00000f, 99.56183f, 99.12366f, 98.68549f, 98.24732f, 97.80914f, 97.37097f, 96.93280f, 96.49463f, 96.05646f, 95.61829f, 95.47821f, 95.33813f, 95.19806f, 95.05798f, 94.91790f, 94.77782f, 94.63774f, 94.49767f, 94.35759f, 94.21751f, 93.49592f, 92.77433f, 92.05275f, 91.33116f, 90.60957f, 89.88798f, 89.16639f, 88.44480f, 87.72322f, 87.00163f, 87.02501f, 87.04840f, 87.07178f, 87.09517f, 87.11855f, 87.14194f, 87.16532f, 87.18871f, 87.21209f, 87.23548f, 87.12698f, 87.01849f, 86.90999f, 86.80150f, 86.69301f, 86.58451f, 86.47602f, 86.36752f, 86.25903f, 86.15053f, 85.89484f, 85.63914f, 85.38344f, 85.12775f, 84.87205f, 84.61635f, 84.36066f, 84.10496f, 83.84926f, 83.59357f, 83.11025f, 82.62693f, 82.14361f, 81.66029f, 81.17697f, 80.69365f, 80.21033f, 79.72701f, 79.24369f, 78.76037f, 78.72869f, 78.69700f, 78.66531f, 78.63362f, 78.60193f, 78.57024f, 78.53855f, 78.50686f, 78.47517f, 78.44348f, 78.08076f, 77.71803f, 77.35531f, 76.99259f, 76.62986f, 76.26714f, 75.90441f, 75.54169f, 75.17897f, 74.81624f, 74.76879f, 74.72133f, 74.67387f, 74.62642f, 74.57896f, 74.53151f, 74.48405f, 74.43660f, 74.38914f, 74.34168f, 74.45178f, 74.56187f, 74.67196f, 74.78206f, 74.89215f, 75.00224f, 75.11234f, 75.22243f, 75.33252f, 75.44261f, 75.05796f, 74.67331f, 74.28865f, 73.90400f, 73.51934f, 73.13469f, 72.75004f, 72.36538f, 71.98073f, 71.59608f, 70.82343f, 70.05079f, 69.27815f, 68.50551f, 67.73287f, 66.96023f, 66.18759f, 65.41494f, 64.64230f, 63.86966f, 63.99221f, 64.11475f, 64.23730f, 64.35984f, 64.48238f, 64.60493f, 64.72747f, 64.85002f, 64.97256f, 65.09511f, 65.39444f, 65.69378f, 65.99311f, 66.29245f, 66.59178f, 66.89112f, 67.19045f, 67.48979f, 67.78912f, 68.08846f, 66.92547f, 65.76248f, 64.59949f, 63.43650f, 62.27352f, 61.11053f, 59.94754f, 58.78455f, 57.62157f, 56.45858f, 57.23862f, 58.01867f, 58.79872f, 59.57876f, 60.35881f, 61.13886f, 61.91890f, 62.69895f, 63.47900f, 64.25904f, 64.75003f, 65.24102f, 65.73201f, 66.22300f, 66.71398f, 67.20497f, 67.69596f, 68.18695f, 68.67794f, 69.16892f, 68.11643f, 67.06394f, 66.01144f, 64.95895f, 63.90646f, 62.85396f, 61.80147f, 60.74897f, 59.69648f, 58.64399f, 57.04243f, 55.44088f, 53.83933f, 52.23778f, 50.63623f, 49.03467f, 47.43312f, 45.83157f, 44.23002f, 42.62847f, 44.50247f, 46.37646f, 48.25046f, 50.12446f, 51.99846f, 53.87246f, 55.74646f, 57.62046f, 59.49446f, 61.36846f, 61.06554f, 60.76262f, 60.45971f, 60.15679f, 59.85387f, 59.55095f, 59.24803f, 58.94511f, 58.64220f, 58.33928f, 58.42121f, 58.50314f, 58.58507f, 58.66700f, 58.74893f, 58.83086f, 58.91279f, 58.99472f, 59.07665f, 59.15858f, 58.71710f, 58.27561f, 57.83413f, 57.39265f, 56.95117f, 56.50968f, 56.06820f, 55.62672f, 55.18524f, 54.74375f, 54.06225f, 53.38074f, 52.69924f, 52.01773f, 51.33623f, 50.65472f, 49.97322f, 49.29171f, 48.61020f, 47.92870f, 48.42875f, 48.92879f, 49.42884f, 49.92888f, 50.42893f, 50.92898f, 51.42902f, 51.92907f, 52.42912f, 52.92916f, 53.19159f, 53.45401f, 53.71644f, 53.97886f, 54.24128f, 54.50371f, 54.76613f, 55.02856f, 55.29098f, 55.55340f };

        std::vector<float> _spectralight_a             = std::vector<float>{ 0.00002f, 0.00010f, 0.00015f, 0.00019f, 0.00023f, 0.00028f, 0.00032f, 0.00037f, 0.00044f, 0.00053f, 0.00063f, 0.00073f, 0.00082f, 0.00090f, 0.00098f, 0.00105f, 0.00112f, 0.00117f, 0.00123f, 0.00127f, 0.00132f, 0.00136f, 0.00140f, 0.00145f, 0.00151f, 0.00159f, 0.00167f, 0.00176f, 0.00185f, 0.00194f, 0.00202f, 0.00211f, 0.00218f, 0.00225f, 0.00231f, 0.00237f, 0.00244f, 0.00251f, 0.00259f, 0.00267f, 0.00275f, 0.00284f, 0.00293f, 0.00303f, 0.00313f, 0.00324f, 0.00335f, 0.00346f, 0.00355f, 0.00364f, 0.00372f, 0.00380f, 0.00390f, 0.00401f, 0.00412f, 0.00424f, 0.00434f, 0.00442f, 0.00450f, 0.00458f, 0.00466f, 0.00476f, 0.00486f, 0.00496f, 0.00506f, 0.00515f, 0.00524f, 0.00532f, 0.00541f, 0.00551f, 0.00561f, 0.00571f, 0.00580f, 0.00590f, 0.00599f, 0.00609f, 0.00620f, 0.00632f, 0.00644f, 0.00656f, 0.00668f, 0.00677f, 0.00687f, 0.00696f, 0.00706f, 0.00718f, 0.00730f, 0.00743f, 0.00755f, 0.00766f, 0.00777f, 0.00788f, 0.00799f, 0.00810f, 0.00822f, 0.00833f, 0.00845f, 0.00856f, 0.00868f, 0.00880f, 0.00891f, 0.00904f, 0.00916f, 0.00928f, 0.00940f, 0.00951f, 0.00962f, 0.00972f, 0.00984f, 0.00996f, 0.01009f, 0.01022f, 0.01034f, 0.01045f, 0.01055f, 0.01065f, 0.01076f, 0.01088f, 0.01102f, 0.01115f, 0.01129f, 0.01142f, 0.01155f, 0.01168f, 0.01181f, 0.01195f, 0.01210f, 0.01226f, 0.01241f, 0.01256f, 0.01271f, 0.01287f, 0.01302f, 0.01319f, 0.01335f, 0.01352f, 0.01369f, 0.01385f, 0.01400f, 0.01415f, 0.01430f, 0.01447f, 0.01466f, 0.01484f, 0.01503f, 0.01521f, 0.01539f, 0.01556f, 0.01574f, 0.01592f, 0.01610f, 0.01627f, 0.01645f, 0.01663f, 0.01681f, 0.01699f, 0.01716f, 0.01734f, 0.01751f, 0.01767f, 0.01783f, 0.01799f, 0.01814f, 0.01828f, 0.01843f, 0.01858f, 0.01873f, 0.01889f, 0.01904f, 0.01920f, 0.01935f, 0.01950f, 0.01965f, 0.01980f, 0.01996f, 0.02011f, 0.02027f, 0.02042f, 0.02057f, 0.02073f, 0.02088f, 0.02105f, 0.02122f, 0.02139f, 0.02155f, 0.02171f, 0.02185f, 0.02199f, 0.02213f, 0.02229f, 0.02246f, 0.02264f, 0.02282f, 0.02300f, 0.02317f, 0.02334f, 0.02351f, 0.02368f, 0.02385f, 0.02402f, 0.02419f, 0.02436f, 0.02453f, 0.02470f, 0.02488f, 0.02506f, 0.02525f, 0.02544f, 0.02562f, 0.02581f, 0.02598f, 0.02616f, 0.02633f, 0.02651f, 0.02669f, 0.02687f, 0.02705f, 0.02723f, 0.02741f, 0.02759f, 0.02777f, 0.02795f, 0.02813f, 0.02832f, 0.02850f, 0.02869f, 0.02886f, 0.02904f, 0.02921f, 0.02939f, 0.02957f, 0.02975f, 0.02992f, 0.03009f, 0.03026f, 0.03041f, 0.03057f, 0.03073f, 0.03090f, 0.03106f, 0.03122f, 0.03137f, 0.03151f, 0.03165f, 0.03179f, 0.03193f, 0.03208f, 0.03224f, 0.03240f, 0.03256f, 0.03272f, 0.03289f, 0.03305f, 0.03322f, 0.03338f, 0.03355f, 0.03372f, 0.03389f, 0.03408f, 0.03428f, 0.03448f, 0.03468f, 0.03488f, 0.03508f, 0.03527f, 0.03546f, 0.03564f, 0.03583f, 0.03601f, 0.03622f, 0.03644f, 0.03667f, 0.03689f, 0.03708f, 0.03724f, 0.03740f, 0.03755f, 0.03772f, 0.03792f, 0.03812f, 0.03833f, 0.03853f, 0.03872f, 0.03891f, 0.03910f, 0.03927f, 0.03944f, 0.03960f, 0.03977f, 0.03993f, 0.04010f, 0.04027f, 0.04044f, 0.04061f, 0.04079f, 0.04096f, 0.04113f, 0.04130f, 0.04146f, 0.04161f, 0.04176f, 0.04191f, 0.04204f, 0.04217f, 0.04230f, 0.04243f, 0.04256f, 0.04269f, 0.04283f, 0.04299f, 0.04316f, 0.04333f, 0.04348f, 0.04360f, 0.04369f, 0.04377f, 0.04385f, 0.04396f, 0.04410f, 0.04424f, 0.04439f, 0.04452f, 0.04464f, 0.04475f, 0.04488f, 0.04502f, 0.04518f, 0.04534f, 0.04550f, 0.04563f, 0.04574f, 0.04584f, 0.04593f, 0.04603f, 0.04613f, 0.04623f, 0.04633f, 0.04642f, 0.04651f, 0.04661f, 0.04671f, 0.04682f, 0.04695f, 0.04709f, 0.04723f, 0.04738f, 0.04754f, 0.04769f, 0.04785f, 0.04799f, 0.04813f, 0.04827f, 0.04839f, 0.04851f, 0.04861f, 0.04872f, 0.04883f, 0.04895f, 0.04908f, 0.04922f, 0.04937f, 0.04952f, 0.04969f, 0.04986f, 0.05005f, 0.05027f, 0.05050f, 0.05072f, 0.05093f, 0.05106f, 0.05119f, 0.05131f, 0.05145f, 0.05165f, 0.05187f, 0.05208f, 0.05228f, 0.05243f, 0.05257f, 0.05271f, 0.05288f, 0.05310f, 0.05332f, 0.05352f, 0.05369f, 0.05380f, 0.05388f, 0.05395f, 0.05402f, 0.05409f, 0.05417f, 0.05426f, 0.05437f, 0.05451f, 0.05466f, 0.05481f, 0.05494f, 0.05504f, 0.05513f, 0.05522f, 0.05530f, 0.05537f, 0.05545f, 0.05552f, 0.05559f, 0.05567f, 0.05574f, 0.05581f, 0.05585f, 0.05588f, 0.05593f, 0.05599f, 0.05613f, 0.05630f, 0.05648f, 0.05665f, 0.05675f, 0.05682f, 0.05689f, 0.05698f, 0.05715f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f };
        std::vector<float> _spectralight_cw            = std::vector<float>{ 0.00243f, 0.00314f, 0.00380f, 0.00434f, 0.00462f, 0.00468f, 0.00459f, 0.00434f, 0.00388f, 0.00327f, 0.00263f, 0.00201f, 0.00159f, 0.00135f, 0.00119f, 0.00109f, 0.00105f, 0.00105f, 0.00108f, 0.00115f, 0.00123f, 0.00131f, 0.00141f, 0.00151f, 0.00161f, 0.00170f, 0.00179f, 0.00188f, 0.00198f, 0.00208f, 0.00218f, 0.00230f, 0.00232f, 0.00230f, 0.00241f, 0.00271f, 0.00350f, 0.00477f, 0.00623f, 0.00782f, 0.00948f, 0.01111f, 0.01260f, 0.01383f, 0.01457f, 0.01472f, 0.01448f, 0.01386f, 0.01274f, 0.01111f, 0.00936f, 0.00766f, 0.00639f, 0.00576f, 0.00538f, 0.00520f, 0.00514f, 0.00516f, 0.00525f, 0.00541f, 0.00556f, 0.00566f, 0.00579f, 0.00597f, 0.00605f, 0.00590f, 0.00609f, 0.00684f, 0.00877f, 0.01265f, 0.01700f, 0.02143f, 0.02540f, 0.02823f, 0.03038f, 0.03175f, 0.03211f, 0.03105f, 0.02922f, 0.02676f, 0.02377f, 0.02020f, 0.01660f, 0.01324f, 0.01057f, 0.00953f, 0.00905f, 0.00898f, 0.00911f, 0.00907f, 0.00910f, 0.00919f, 0.00930f, 0.00935f, 0.00940f, 0.00945f, 0.00950f, 0.00954f, 0.00958f, 0.00961f, 0.00963f, 0.00964f, 0.00965f, 0.00965f, 0.00965f, 0.00965f, 0.00966f, 0.00966f, 0.00966f, 0.00965f, 0.00964f, 0.00963f, 0.00961f, 0.00959f, 0.00957f, 0.00955f, 0.00953f, 0.00951f, 0.00950f, 0.00950f, 0.00949f, 0.00950f, 0.00950f, 0.00950f, 0.00951f, 0.00951f, 0.00951f, 0.00951f, 0.00950f, 0.00949f, 0.00946f, 0.00944f, 0.00940f, 0.00934f, 0.00928f, 0.00921f, 0.00914f, 0.00908f, 0.00902f, 0.00897f, 0.00893f, 0.00890f, 0.00887f, 0.00886f, 0.00885f, 0.00884f, 0.00883f, 0.00883f, 0.00884f, 0.00886f, 0.00891f, 0.00896f, 0.00902f, 0.00909f, 0.00916f, 0.00925f, 0.00934f, 0.00945f, 0.00958f, 0.00972f, 0.00988f, 0.01003f, 0.01018f, 0.01035f, 0.01054f, 0.01076f, 0.01102f, 0.01129f, 0.01159f, 0.01188f, 0.01218f, 0.01251f, 0.01288f, 0.01318f, 0.01347f, 0.01393f, 0.01467f, 0.01596f, 0.01785f, 0.02006f, 0.02252f, 0.02535f, 0.02846f, 0.03141f, 0.03399f, 0.03568f, 0.03628f, 0.03624f, 0.03563f, 0.03433f, 0.03239f, 0.03024f, 0.02811f, 0.02643f, 0.02544f, 0.02477f, 0.02437f, 0.02428f, 0.02448f, 0.02483f, 0.02529f, 0.02572f, 0.02604f, 0.02635f, 0.02666f, 0.02694f, 0.02719f, 0.02747f, 0.02778f, 0.02821f, 0.02878f, 0.02941f, 0.03007f, 0.03079f, 0.03157f, 0.03227f, 0.03286f, 0.03322f, 0.03325f, 0.03309f, 0.03275f, 0.03222f, 0.03148f, 0.03066f, 0.02983f, 0.02908f, 0.02853f, 0.02803f, 0.02760f, 0.02721f, 0.02687f, 0.02655f, 0.02625f, 0.02593f, 0.02560f, 0.02525f, 0.02489f, 0.02452f, 0.02413f, 0.02374f, 0.02334f, 0.02296f, 0.02259f, 0.02224f, 0.02190f, 0.02159f, 0.02133f, 0.02107f, 0.02081f, 0.02052f, 0.02020f, 0.01986f, 0.01949f, 0.01909f, 0.01866f, 0.01821f, 0.01774f, 0.01726f, 0.01677f, 0.01629f, 0.01582f, 0.01538f, 0.01500f, 0.01464f, 0.01429f, 0.01394f, 0.01357f, 0.01321f, 0.01285f, 0.01251f, 0.01219f, 0.01187f, 0.01155f, 0.01124f, 0.01092f, 0.01060f, 0.01029f, 0.00999f, 0.00970f, 0.00943f, 0.00917f, 0.00892f, 0.00869f, 0.00847f, 0.00825f, 0.00805f, 0.00784f, 0.00764f, 0.00744f, 0.00723f, 0.00702f, 0.00680f, 0.00659f, 0.00639f, 0.00621f, 0.00604f, 0.00587f, 0.00571f, 0.00556f, 0.00541f, 0.00527f, 0.00513f, 0.00499f, 0.00485f, 0.00472f, 0.00459f, 0.00446f, 0.00433f, 0.00421f, 0.00408f, 0.00396f, 0.00384f, 0.00372f, 0.00361f, 0.00350f, 0.00340f, 0.00331f, 0.00322f, 0.00315f, 0.00308f, 0.00300f, 0.00292f, 0.00281f, 0.00271f, 0.00262f, 0.00255f, 0.00250f, 0.00246f, 0.00242f, 0.00237f, 0.00232f, 0.00226f, 0.00220f, 0.00214f, 0.00209f, 0.00203f, 0.00198f, 0.00191f, 0.00184f, 0.00177f, 0.00171f, 0.00166f, 0.00162f, 0.00160f, 0.00157f, 0.00156f, 0.00156f, 0.00155f, 0.00154f, 0.00150f, 0.00145f, 0.00139f, 0.00133f, 0.00129f, 0.00125f, 0.00121f, 0.00118f, 0.00114f, 0.00111f, 0.00107f, 0.00103f, 0.00094f, 0.00086f, 0.00079f, 0.00073f, 0.00077f, 0.00082f, 0.00088f, 0.00094f, 0.00095f, 0.00095f, 0.00093f, 0.00088f, 0.00077f, 0.00065f, 0.00053f, 0.00045f, 0.00046f, 0.00049f, 0.00054f, 0.00059f, 0.00064f, 0.00068f, 0.00071f, 0.00071f, 0.00067f, 0.00061f, 0.00055f, 0.00051f, 0.00050f, 0.00049f, 0.00049f, 0.00048f, 0.00047f, 0.00046f, 0.00045f, 0.00045f, 0.00046f, 0.00048f, 0.00048f, 0.00048f, 0.00047f, 0.00045f, 0.00041f, 0.00033f, 0.00023f, 0.00013f, 0.00005f, 0.00005f, 0.00011f, 0.00018f, 0.00025f, 0.00030f, 0.00033f, 0.00033f, 0.00029f, 0.00015f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f };
        std::vector<float> _spectralight_d65           = std::vector<float>{ 0.00215f, 0.00228f, 0.00240f, 0.00253f, 0.00280f, 0.00316f, 0.00354f, 0.00394f, 0.00427f, 0.00457f, 0.00487f, 0.00519f, 0.00558f, 0.00601f, 0.00646f, 0.00690f, 0.00732f, 0.00770f, 0.00809f, 0.00849f, 0.00892f, 0.00939f, 0.00987f, 0.01038f, 0.01090f, 0.01144f, 0.01199f, 0.01256f, 0.01314f, 0.01375f, 0.01436f, 0.01497f, 0.01558f, 0.01618f, 0.01677f, 0.01737f, 0.01797f, 0.01856f, 0.01915f, 0.01973f, 0.02030f, 0.02084f, 0.02136f, 0.02187f, 0.02236f, 0.02283f, 0.02328f, 0.02370f, 0.02409f, 0.02443f, 0.02475f, 0.02504f, 0.02531f, 0.02557f, 0.02580f, 0.02600f, 0.02617f, 0.02628f, 0.02638f, 0.02646f, 0.02656f, 0.02667f, 0.02679f, 0.02690f, 0.02702f, 0.02714f, 0.02725f, 0.02737f, 0.02748f, 0.02758f, 0.02768f, 0.02778f, 0.02787f, 0.02797f, 0.02806f, 0.02815f, 0.02824f, 0.02835f, 0.02845f, 0.02854f, 0.02863f, 0.02871f, 0.02877f, 0.02883f, 0.02889f, 0.02894f, 0.02899f, 0.02903f, 0.02907f, 0.02910f, 0.02913f, 0.02915f, 0.02917f, 0.02918f, 0.02919f, 0.02920f, 0.02921f, 0.02922f, 0.02923f, 0.02923f, 0.02924f, 0.02924f, 0.02924f, 0.02923f, 0.02922f, 0.02919f, 0.02916f, 0.02912f, 0.02907f, 0.02903f, 0.02897f, 0.02892f, 0.02886f, 0.02879f, 0.02872f, 0.02864f, 0.02857f, 0.02850f, 0.02843f, 0.02837f, 0.02830f, 0.02824f, 0.02817f, 0.02811f, 0.02805f, 0.02799f, 0.02794f, 0.02788f, 0.02782f, 0.02775f, 0.02767f, 0.02759f, 0.02750f, 0.02743f, 0.02735f, 0.02728f, 0.02721f, 0.02713f, 0.02705f, 0.02697f, 0.02689f, 0.02682f, 0.02675f, 0.02668f, 0.02661f, 0.02651f, 0.02641f, 0.02631f, 0.02620f, 0.02609f, 0.02598f, 0.02587f, 0.02576f, 0.02565f, 0.02555f, 0.02545f, 0.02535f, 0.02524f, 0.02513f, 0.02502f, 0.02490f, 0.02478f, 0.02465f, 0.02452f, 0.02440f, 0.02428f, 0.02416f, 0.02406f, 0.02397f, 0.02389f, 0.02382f, 0.02378f, 0.02375f, 0.02374f, 0.02375f, 0.02378f, 0.02383f, 0.02391f, 0.02403f, 0.02416f, 0.02431f, 0.02448f, 0.02465f, 0.02484f, 0.02504f, 0.02523f, 0.02543f, 0.02563f, 0.02583f, 0.02605f, 0.02628f, 0.02651f, 0.02674f, 0.02696f, 0.02716f, 0.02735f, 0.02753f, 0.02770f, 0.02787f, 0.02801f, 0.02813f, 0.02820f, 0.02822f, 0.02819f, 0.02811f, 0.02796f, 0.02773f, 0.02745f, 0.02713f, 0.02678f, 0.02639f, 0.02600f, 0.02563f, 0.02531f, 0.02506f, 0.02484f, 0.02464f, 0.02444f, 0.02423f, 0.02401f, 0.02377f, 0.02349f, 0.02315f, 0.02280f, 0.02245f, 0.02212f, 0.02183f, 0.02157f, 0.02133f, 0.02114f, 0.02099f, 0.02087f, 0.02079f, 0.02075f, 0.02074f, 0.02076f, 0.02080f, 0.02083f, 0.02086f, 0.02089f, 0.02092f, 0.02095f, 0.02098f, 0.02100f, 0.02103f, 0.02106f, 0.02109f, 0.02112f, 0.02115f, 0.02118f, 0.02121f, 0.02123f, 0.02125f, 0.02127f, 0.02130f, 0.02131f, 0.02132f, 0.02131f, 0.02129f, 0.02125f, 0.02119f, 0.02113f, 0.02105f, 0.02097f, 0.02087f, 0.02077f, 0.02065f, 0.02053f, 0.02040f, 0.02026f, 0.02012f, 0.01997f, 0.01982f, 0.01966f, 0.01952f, 0.01937f, 0.01921f, 0.01905f, 0.01888f, 0.01871f, 0.01854f, 0.01838f, 0.01823f, 0.01809f, 0.01795f, 0.01781f, 0.01766f, 0.01752f, 0.01739f, 0.01726f, 0.01716f, 0.01706f, 0.01697f, 0.01689f, 0.01683f, 0.01677f, 0.01671f, 0.01667f, 0.01662f, 0.01659f, 0.01656f, 0.01654f, 0.01654f, 0.01655f, 0.01656f, 0.01659f, 0.01662f, 0.01666f, 0.01672f, 0.01679f, 0.01686f, 0.01695f, 0.01704f, 0.01712f, 0.01720f, 0.01729f, 0.01738f, 0.01748f, 0.01759f, 0.01771f, 0.01783f, 0.01796f, 0.01810f, 0.01824f, 0.01840f, 0.01857f, 0.01876f, 0.01896f, 0.01915f, 0.01930f, 0.01943f, 0.01956f, 0.01967f, 0.01980f, 0.01993f, 0.02005f, 0.02017f, 0.02029f, 0.02039f, 0.02048f, 0.02055f, 0.02060f, 0.02063f, 0.02066f, 0.02069f, 0.02074f, 0.02082f, 0.02089f, 0.02096f, 0.02102f, 0.02106f, 0.02110f, 0.02111f, 0.02108f, 0.02103f, 0.02097f, 0.02092f, 0.02089f, 0.02086f, 0.02084f, 0.02082f, 0.02077f, 0.02072f, 0.02067f, 0.02064f, 0.02067f, 0.02070f, 0.02071f, 0.02069f, 0.02056f, 0.02040f, 0.02022f, 0.02005f, 0.01992f, 0.01981f, 0.01972f, 0.01964f, 0.01959f, 0.01955f, 0.01952f, 0.01948f, 0.01942f, 0.01936f, 0.01929f, 0.01922f, 0.01916f, 0.01910f, 0.01905f, 0.01901f, 0.01901f, 0.01901f, 0.01901f, 0.01900f, 0.01897f, 0.01894f, 0.01892f, 0.01895f, 0.01902f, 0.01910f, 0.01917f, 0.01917f, 0.01912f, 0.01906f, 0.01900f, 0.01898f, 0.01898f, 0.01898f, 0.01898f, 0.01893f, 0.01886f, 0.01879f, 0.01873f, 0.01871f, 0.01871f, 0.01871f, 0.01872f, 0.01870f, 0.01867f, 0.01863f, 0.01858f, 0.01850f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f };
        std::vector<float> _spectralight_hor           = std::vector<float>{ 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00003f, 0.00008f, 0.00010f, 0.00012f, 0.00012f, 0.00014f, 0.00017f, 0.00019f, 0.00022f, 0.00024f, 0.00027f, 0.00030f, 0.00033f, 0.00036f, 0.00039f, 0.00043f, 0.00046f, 0.00050f, 0.00053f, 0.00057f, 0.00060f, 0.00064f, 0.00069f, 0.00073f, 0.00077f, 0.00081f, 0.00084f, 0.00086f, 0.00089f, 0.00092f, 0.00097f, 0.00102f, 0.00107f, 0.00113f, 0.00119f, 0.00125f, 0.00132f, 0.00137f, 0.00141f, 0.00146f, 0.00150f, 0.00154f, 0.00158f, 0.00163f, 0.00168f, 0.00173f, 0.00178f, 0.00184f, 0.00189f, 0.00195f, 0.00202f, 0.00208f, 0.00215f, 0.00220f, 0.00226f, 0.00231f, 0.00236f, 0.00241f, 0.00247f, 0.00253f, 0.00259f, 0.00265f, 0.00270f, 0.00275f, 0.00281f, 0.00288f, 0.00297f, 0.00306f, 0.00315f, 0.00324f, 0.00331f, 0.00338f, 0.00345f, 0.00352f, 0.00359f, 0.00367f, 0.00374f, 0.00382f, 0.00390f, 0.00398f, 0.00405f, 0.00413f, 0.00420f, 0.00428f, 0.00435f, 0.00443f, 0.00453f, 0.00463f, 0.00473f, 0.00483f, 0.00492f, 0.00502f, 0.00511f, 0.00521f, 0.00530f, 0.00539f, 0.00548f, 0.00558f, 0.00568f, 0.00578f, 0.00588f, 0.00599f, 0.00609f, 0.00619f, 0.00629f, 0.00639f, 0.00650f, 0.00661f, 0.00673f, 0.00684f, 0.00696f, 0.00707f, 0.00719f, 0.00731f, 0.00743f, 0.00756f, 0.00769f, 0.00783f, 0.00796f, 0.00809f, 0.00823f, 0.00836f, 0.00850f, 0.00865f, 0.00880f, 0.00894f, 0.00909f, 0.00924f, 0.00940f, 0.00955f, 0.00971f, 0.00988f, 0.01005f, 0.01022f, 0.01039f, 0.01056f, 0.01073f, 0.01090f, 0.01108f, 0.01126f, 0.01144f, 0.01162f, 0.01180f, 0.01197f, 0.01214f, 0.01231f, 0.01248f, 0.01265f, 0.01281f, 0.01298f, 0.01315f, 0.01331f, 0.01348f, 0.01365f, 0.01383f, 0.01401f, 0.01419f, 0.01438f, 0.01456f, 0.01474f, 0.01492f, 0.01510f, 0.01529f, 0.01547f, 0.01566f, 0.01584f, 0.01602f, 0.01620f, 0.01638f, 0.01656f, 0.01675f, 0.01695f, 0.01715f, 0.01734f, 0.01754f, 0.01773f, 0.01792f, 0.01811f, 0.01830f, 0.01851f, 0.01871f, 0.01892f, 0.01912f, 0.01933f, 0.01954f, 0.01974f, 0.01995f, 0.02015f, 0.02035f, 0.02056f, 0.02078f, 0.02100f, 0.02123f, 0.02146f, 0.02170f, 0.02193f, 0.02217f, 0.02241f, 0.02265f, 0.02290f, 0.02315f, 0.02340f, 0.02364f, 0.02388f, 0.02412f, 0.02436f, 0.02460f, 0.02486f, 0.02512f, 0.02538f, 0.02564f, 0.02590f, 0.02616f, 0.02643f, 0.02669f, 0.02696f, 0.02723f, 0.02749f, 0.02777f, 0.02805f, 0.02833f, 0.02861f, 0.02889f, 0.02918f, 0.02947f, 0.02975f, 0.03003f, 0.03030f, 0.03056f, 0.03083f, 0.03109f, 0.03135f, 0.03161f, 0.03188f, 0.03215f, 0.03243f, 0.03272f, 0.03301f, 0.03329f, 0.03357f, 0.03385f, 0.03414f, 0.03443f, 0.03474f, 0.03504f, 0.03535f, 0.03565f, 0.03593f, 0.03621f, 0.03649f, 0.03678f, 0.03709f, 0.03741f, 0.03772f, 0.03804f, 0.03835f, 0.03867f, 0.03898f, 0.03929f, 0.03961f, 0.03993f, 0.04025f, 0.04057f, 0.04088f, 0.04119f, 0.04150f, 0.04182f, 0.04214f, 0.04246f, 0.04279f, 0.04312f, 0.04346f, 0.04379f, 0.04413f, 0.04446f, 0.04478f, 0.04509f, 0.04540f, 0.04570f, 0.04600f, 0.04630f, 0.04660f, 0.04691f, 0.04722f, 0.04753f, 0.04784f, 0.04816f, 0.04847f, 0.04879f, 0.04910f, 0.04941f, 0.04973f, 0.05004f, 0.05034f, 0.05062f, 0.05089f, 0.05116f, 0.05143f, 0.05172f, 0.05204f, 0.05236f, 0.05268f, 0.05297f, 0.05323f, 0.05348f, 0.05373f, 0.05399f, 0.05426f, 0.05453f, 0.05482f, 0.05511f, 0.05542f, 0.05574f, 0.05606f, 0.05639f, 0.05671f, 0.05704f, 0.05736f, 0.05766f, 0.05794f, 0.05822f, 0.05850f, 0.05879f, 0.05909f, 0.05938f, 0.05967f, 0.05993f, 0.06019f, 0.06045f, 0.06072f, 0.06104f, 0.06139f, 0.06174f, 0.06209f, 0.06240f, 0.06269f, 0.06298f, 0.06327f, 0.06362f, 0.06398f, 0.06434f, 0.06470f, 0.06503f, 0.06535f, 0.06566f, 0.06598f, 0.06632f, 0.06667f, 0.06703f, 0.06737f, 0.06769f, 0.06800f, 0.06833f, 0.06866f, 0.06906f, 0.06947f, 0.06988f, 0.07029f, 0.07065f, 0.07100f, 0.07136f, 0.07172f, 0.07213f, 0.07255f, 0.07296f, 0.07338f, 0.07377f, 0.07415f, 0.07453f, 0.07491f, 0.07532f, 0.07572f, 0.07611f, 0.07648f, 0.07682f, 0.07713f, 0.07745f, 0.07776f, 0.07809f, 0.07841f, 0.07873f, 0.07903f, 0.07931f, 0.07960f, 0.07989f, 0.08019f, 0.08052f, 0.08086f, 0.08119f, 0.08150f, 0.08181f, 0.08211f, 0.08242f, 0.08276f, 0.08312f, 0.08349f, 0.08384f, 0.08415f, 0.08443f, 0.08471f, 0.08499f, 0.08533f, 0.08568f, 0.08605f, 0.08642f, 0.08675f, 0.08708f, 0.08742f, 0.08778f, 0.08823f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f };
        std::vector<float> _spectralight_tl84          = std::vector<float>{ 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00111f, 0.00314f, 0.00530f, 0.00743f, 0.00939f, 0.01112f, 0.01254f, 0.01338f, 0.01356f, 0.01330f, 0.01261f, 0.01133f, 0.00946f, 0.00749f, 0.00561f, 0.00431f, 0.00387f, 0.00374f, 0.00385f, 0.00407f, 0.00430f, 0.00462f, 0.00501f, 0.00545f, 0.00591f, 0.00642f, 0.00700f, 0.00743f, 0.00751f, 0.00802f, 0.00924f, 0.01200f, 0.01733f, 0.02322f, 0.02916f, 0.03438f, 0.03793f, 0.04053f, 0.04210f, 0.04236f, 0.04083f, 0.03838f, 0.03522f, 0.03156f, 0.02752f, 0.02352f, 0.01981f, 0.01687f, 0.01568f, 0.01510f, 0.01496f, 0.01501f, 0.01484f, 0.01473f, 0.01466f, 0.01460f, 0.01446f, 0.01430f, 0.01412f, 0.01392f, 0.01367f, 0.01341f, 0.01312f, 0.01283f, 0.01253f, 0.01223f, 0.01192f, 0.01161f, 0.01128f, 0.01096f, 0.01063f, 0.01030f, 0.00994f, 0.00958f, 0.00926f, 0.00899f, 0.00860f, 0.00835f, 0.00831f, 0.00859f, 0.00943f, 0.01071f, 0.01242f, 0.01458f, 0.01767f, 0.02114f, 0.02472f, 0.02821f, 0.03129f, 0.03392f, 0.03602f, 0.03746f, 0.03769f, 0.03706f, 0.03580f, 0.03400f, 0.03169f, 0.02901f, 0.02611f, 0.02308f, 0.02016f, 0.01735f, 0.01466f, 0.01214f, 0.00996f, 0.00806f, 0.00640f, 0.00500f, 0.00388f, 0.00302f, 0.00236f, 0.00186f, 0.00150f, 0.00124f, 0.00107f, 0.00096f, 0.00085f, 0.00074f, 0.00066f, 0.00058f, 0.00050f, 0.00042f, 0.00035f, 0.00027f, 0.00016f, 0.00004f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00019f, 0.00060f, 0.00084f, 0.00110f, 0.00218f, 0.00443f, 0.00843f, 0.01448f, 0.02257f, 0.03290f, 0.04746f, 0.06618f, 0.08557f, 0.10440f, 0.12030f, 0.13220f, 0.14090f, 0.14570f, 0.14470f, 0.13770f, 0.12720f, 0.11410f, 0.09921f, 0.08327f, 0.06719f, 0.05182f, 0.03914f, 0.03010f, 0.02278f, 0.01697f, 0.01235f, 0.00868f, 0.00594f, 0.00396f, 0.00256f, 0.00155f, 0.00095f, 0.00067f, 0.00052f, 0.00037f, 0.00042f, 0.00069f, 0.00116f, 0.00183f, 0.00281f, 0.00419f, 0.00612f, 0.00875f, 0.01175f, 0.01502f, 0.01852f, 0.02218f, 0.02583f, 0.02934f, 0.03260f, 0.03548f, 0.03790f, 0.03976f, 0.04084f, 0.04095f, 0.04039f, 0.03921f, 0.03736f, 0.03482f, 0.03195f, 0.02891f, 0.02594f, 0.02327f, 0.02077f, 0.01850f, 0.01631f, 0.01411f, 0.01260f, 0.01210f, 0.01293f, 0.01545f, 0.01976f, 0.02612f, 0.03590f, 0.05038f, 0.06571f, 0.08067f, 0.09326f, 0.10160f, 0.10720f, 0.10980f, 0.10850f, 0.10230f, 0.09376f, 0.08371f, 0.07314f, 0.06304f, 0.05333f, 0.04450f, 0.03770f, 0.03393f, 0.03137f, 0.02968f, 0.02828f, 0.02667f, 0.02520f, 0.02379f, 0.02226f, 0.02044f, 0.01853f, 0.01653f, 0.01436f, 0.01197f, 0.00965f, 0.00747f, 0.00564f, 0.00431f, 0.00330f, 0.00260f, 0.00229f, 0.00238f, 0.00269f, 0.00315f, 0.00365f, 0.00411f, 0.00455f, 0.00490f, 0.00507f, 0.00498f, 0.00479f, 0.00451f, 0.00419f, 0.00384f, 0.00349f, 0.00317f, 0.00291f, 0.00276f, 0.00266f, 0.00261f, 0.00266f, 0.00278f, 0.00289f, 0.00296f, 0.00282f, 0.00248f, 0.00208f, 0.00167f, 0.00136f, 0.00117f, 0.00103f, 0.00093f, 0.00087f, 0.00085f, 0.00086f, 0.00091f, 0.00103f, 0.00120f, 0.00137f, 0.00150f, 0.00151f, 0.00141f, 0.00128f, 0.00114f, 0.00111f, 0.00116f, 0.00121f, 0.00122f, 0.00108f, 0.00084f, 0.00057f, 0.00029f, 0.00007f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00029f, 0.00145f, 0.00279f, 0.00421f, 0.00570f, 0.00711f, 0.00829f, 0.00915f, 0.00922f, 0.00879f, 0.00798f, 0.00683f, 0.00523f, 0.00344f, 0.00161f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f };

        std::vector<float> _ie_a                       = std::vector<float>{ 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00002f, 0.00003f, 0.00004f, 0.00005f, 0.00006f, 0.00008f, 0.00009f, 0.00011f, 0.00013f, 0.00015f, 0.00018f, 0.00022f, 0.00025f, 0.00029f, 0.00033f, 0.00036f, 0.00040f, 0.00044f, 0.00048f, 0.00052f, 0.00056f, 0.00060f, 0.00063f, 0.00066f, 0.00069f, 0.00072f, 0.00075f, 0.00079f, 0.00082f, 0.00085f, 0.00088f, 0.00091f, 0.00093f, 0.00096f, 0.00098f, 0.00100f, 0.00102f, 0.00105f, 0.00108f, 0.00111f, 0.00114f, 0.00117f, 0.00119f, 0.00121f, 0.00124f, 0.00126f, 0.00129f, 0.00131f, 0.00134f, 0.00137f, 0.00140f, 0.00143f, 0.00146f, 0.00149f, 0.00152f, 0.00154f, 0.00157f, 0.00160f, 0.00162f, 0.00165f, 0.00168f, 0.00171f, 0.00174f, 0.00177f, 0.00179f, 0.00182f, 0.00185f, 0.00188f, 0.00191f, 0.00194f, 0.00196f, 0.00199f, 0.00202f, 0.00205f, 0.00208f, 0.00211f, 0.00214f, 0.00217f, 0.00220f, 0.00223f, 0.00226f, 0.00230f, 0.00232f, 0.00236f, 0.00239f, 0.00242f, 0.00245f, 0.00248f, 0.00250f, 0.00253f, 0.00257f, 0.00261f, 0.00264f, 0.00268f, 0.00272f, 0.00275f, 0.00278f, 0.00282f, 0.00285f, 0.00289f, 0.00292f, 0.00295f, 0.00298f, 0.00302f, 0.00305f, 0.00309f, 0.00312f, 0.00315f, 0.00319f, 0.00322f, 0.00326f, 0.00330f, 0.00333f, 0.00337f, 0.00341f, 0.00345f, 0.00348f, 0.00352f, 0.00356f, 0.00359f, 0.00363f, 0.00367f, 0.00371f, 0.00375f, 0.00379f, 0.00383f, 0.00387f, 0.00391f, 0.00394f, 0.00398f, 0.00402f, 0.00405f, 0.00409f, 0.00413f, 0.00416f, 0.00420f, 0.00424f, 0.00428f, 0.00432f, 0.00436f, 0.00439f, 0.00443f, 0.00447f, 0.00451f, 0.00455f, 0.00459f, 0.00463f, 0.00467f, 0.00471f, 0.00474f, 0.00478f, 0.00483f, 0.00487f, 0.00492f, 0.00496f, 0.00500f, 0.00505f, 0.00509f, 0.00513f, 0.00517f, 0.00521f, 0.00524f, 0.00528f, 0.00532f, 0.00536f, 0.00540f, 0.00544f, 0.00549f, 0.00553f, 0.00557f, 0.00561f, 0.00565f, 0.00569f, 0.00573f, 0.00577f, 0.00582f, 0.00586f, 0.00590f, 0.00594f, 0.00598f, 0.00603f, 0.00607f, 0.00611f, 0.00615f, 0.00620f, 0.00624f, 0.00628f, 0.00633f, 0.00637f, 0.00641f, 0.00646f, 0.00650f, 0.00654f, 0.00659f, 0.00663f, 0.00668f, 0.00673f, 0.00677f, 0.00682f, 0.00687f, 0.00691f, 0.00695f, 0.00700f, 0.00704f, 0.00708f, 0.00712f, 0.00716f, 0.00720f, 0.00724f, 0.00729f, 0.00733f, 0.00737f, 0.00742f, 0.00746f, 0.00751f, 0.00754f, 0.00758f, 0.00762f, 0.00766f, 0.00770f, 0.00774f, 0.00778f, 0.00782f, 0.00786f, 0.00791f, 0.00795f, 0.00799f, 0.00803f, 0.00806f, 0.00810f, 0.00813f, 0.00817f, 0.00820f, 0.00824f, 0.00827f, 0.00832f, 0.00836f, 0.00840f, 0.00845f, 0.00849f, 0.00852f, 0.00856f, 0.00860f, 0.00864f, 0.00868f, 0.00872f, 0.00876f, 0.00880f, 0.00884f, 0.00887f, 0.00891f, 0.00895f, 0.00898f, 0.00902f, 0.00906f, 0.00910f, 0.00914f, 0.00918f, 0.00921f, 0.00925f, 0.00928f, 0.00931f, 0.00935f, 0.00939f, 0.00942f, 0.00946f, 0.00949f, 0.00953f, 0.00956f, 0.00959f, 0.00962f, 0.00966f, 0.00970f, 0.00973f, 0.00977f, 0.00979f, 0.00982f, 0.00985f, 0.00989f, 0.00993f, 0.00997f, 0.01000f, 0.01003f, 0.01006f, 0.01007f, 0.01009f, 0.01011f, 0.01014f, 0.01016f, 0.01019f, 0.01020f, 0.01022f, 0.01023f, 0.01025f, 0.01027f, 0.01030f, 0.01034f, 0.01038f, 0.01041f, 0.01045f, 0.01049f, 0.01052f, 0.01054f, 0.01055f, 0.01056f, 0.01057f, 0.01058f, 0.01060f, 0.01062f, 0.01064f, 0.01067f, 0.01069f, 0.01071f, 0.01074f, 0.01076f, 0.01078f, 0.01079f, 0.01081f, 0.01083f, 0.01084f, 0.01086f, 0.01088f, 0.01089f, 0.01090f, 0.01091f, 0.01092f, 0.01093f, 0.01094f, 0.01096f, 0.01097f, 0.01099f, 0.01101f, 0.01103f, 0.01105f, 0.01106f, 0.01106f, 0.01106f, 0.01107f, 0.01108f, 0.01109f, 0.01110f, 0.01111f, 0.01111f, 0.01112f, 0.01112f, 0.01113f, 0.01114f, 0.01116f, 0.01117f, 0.01119f, 0.01120f, 0.01121f, 0.01123f, 0.01124f, 0.01126f, 0.01127f, 0.01128f, 0.01129f, 0.01130f, 0.01131f, 0.01131f, 0.01132f, 0.01133f, 0.01134f, 0.01134f, 0.01133f, 0.01132f, 0.01130f, 0.01128f, 0.01127f, 0.01127f, 0.01127f, 0.01127f, 0.01126f, 0.01124f, 0.01121f, 0.01119f, 0.01117f, 0.01116f, 0.01115f, 0.01114f, 0.01112f, 0.01109f, 0.01106f, 0.01103f, 0.01101f, 0.01099f, 0.01097f, 0.01095f, 0.01091f, 0.01088f, 0.01084f, 0.01080f, 0.01076f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f };
        std::vector<float> _ie_d50                     = std::vector<float>{ 0.00694f, 0.00793f, 0.00882f, 0.00958f, 0.01015f, 0.01054f, 0.01076f, 0.01079f, 0.01054f, 0.01007f, 0.00951f, 0.00889f, 0.00835f, 0.00789f, 0.00744f, 0.00699f, 0.00654f, 0.00608f, 0.00564f, 0.00520f, 0.00479f, 0.00440f, 0.00404f, 0.00370f, 0.00342f, 0.00318f, 0.00297f, 0.00279f, 0.00263f, 0.00248f, 0.00236f, 0.00227f, 0.00211f, 0.00193f, 0.00189f, 0.00204f, 0.00265f, 0.00374f, 0.00501f, 0.00637f, 0.00773f, 0.00901f, 0.01013f, 0.01104f, 0.01153f, 0.01154f, 0.01125f, 0.01068f, 0.00973f, 0.00842f, 0.00705f, 0.00575f, 0.00481f, 0.00441f, 0.00423f, 0.00422f, 0.00430f, 0.00443f, 0.00464f, 0.00490f, 0.00517f, 0.00540f, 0.00569f, 0.00605f, 0.00627f, 0.00615f, 0.00654f, 0.00774f, 0.01068f, 0.01649f, 0.02295f, 0.02948f, 0.03523f, 0.03914f, 0.04200f, 0.04371f, 0.04397f, 0.04222f, 0.03945f, 0.03592f, 0.03185f, 0.02741f, 0.02305f, 0.01908f, 0.01602f, 0.01503f, 0.01477f, 0.01504f, 0.01557f, 0.01587f, 0.01628f, 0.01676f, 0.01727f, 0.01772f, 0.01816f, 0.01861f, 0.01905f, 0.01950f, 0.01994f, 0.02037f, 0.02079f, 0.02119f, 0.02158f, 0.02196f, 0.02233f, 0.02269f, 0.02305f, 0.02340f, 0.02373f, 0.02404f, 0.02434f, 0.02463f, 0.02492f, 0.02517f, 0.02544f, 0.02575f, 0.02613f, 0.02666f, 0.02730f, 0.02803f, 0.02885f, 0.02988f, 0.03098f, 0.03207f, 0.03309f, 0.03393f, 0.03459f, 0.03507f, 0.03533f, 0.03522f, 0.03484f, 0.03428f, 0.03356f, 0.03273f, 0.03181f, 0.03083f, 0.02982f, 0.02886f, 0.02792f, 0.02701f, 0.02613f, 0.02533f, 0.02458f, 0.02387f, 0.02321f, 0.02260f, 0.02203f, 0.02150f, 0.02100f, 0.02052f, 0.02006f, 0.01962f, 0.01919f, 0.01875f, 0.01831f, 0.01788f, 0.01745f, 0.01703f, 0.01662f, 0.01621f, 0.01582f, 0.01543f, 0.01505f, 0.01469f, 0.01435f, 0.01403f, 0.01374f, 0.01350f, 0.01335f, 0.01317f, 0.01304f, 0.01318f, 0.01370f, 0.01472f, 0.01635f, 0.01868f, 0.02181f, 0.02641f, 0.03249f, 0.03899f, 0.04551f, 0.05162f, 0.05694f, 0.06125f, 0.06426f, 0.06498f, 0.06315f, 0.05989f, 0.05546f, 0.04996f, 0.04365f, 0.03714f, 0.03082f, 0.02561f, 0.02195f, 0.01903f, 0.01678f, 0.01517f, 0.01413f, 0.01352f, 0.01323f, 0.01308f, 0.01294f, 0.01292f, 0.01300f, 0.01310f, 0.01319f, 0.01337f, 0.01366f, 0.01413f, 0.01482f, 0.01565f, 0.01659f, 0.01768f, 0.01890f, 0.02015f, 0.02140f, 0.02257f, 0.02360f, 0.02451f, 0.02528f, 0.02584f, 0.02615f, 0.02632f, 0.02637f, 0.02634f, 0.02627f, 0.02613f, 0.02593f, 0.02565f, 0.02530f, 0.02492f, 0.02454f, 0.02420f, 0.02393f, 0.02371f, 0.02354f, 0.02337f, 0.02319f, 0.02312f, 0.02319f, 0.02346f, 0.02399f, 0.02479f, 0.02588f, 0.02748f, 0.02977f, 0.03219f, 0.03455f, 0.03655f, 0.03792f, 0.03889f, 0.03944f, 0.03942f, 0.03871f, 0.03767f, 0.03640f, 0.03505f, 0.03376f, 0.03250f, 0.03135f, 0.03047f, 0.03000f, 0.02966f, 0.02938f, 0.02907f, 0.02861f, 0.02811f, 0.02756f, 0.02693f, 0.02622f, 0.02547f, 0.02471f, 0.02396f, 0.02325f, 0.02257f, 0.02193f, 0.02135f, 0.02082f, 0.02036f, 0.01995f, 0.01963f, 0.01939f, 0.01920f, 0.01904f, 0.01887f, 0.01868f, 0.01850f, 0.01831f, 0.01812f, 0.01794f, 0.01775f, 0.01754f, 0.01731f, 0.01706f, 0.01678f, 0.01649f, 0.01617f, 0.01583f, 0.01548f, 0.01510f, 0.01472f, 0.01431f, 0.01390f, 0.01347f, 0.01303f, 0.01257f, 0.01212f, 0.01169f, 0.01128f, 0.01092f, 0.01057f, 0.01024f, 0.00993f, 0.00962f, 0.00933f, 0.00905f, 0.00880f, 0.00858f, 0.00838f, 0.00818f, 0.00797f, 0.00776f, 0.00755f, 0.00735f, 0.00718f, 0.00702f, 0.00686f, 0.00670f, 0.00649f, 0.00625f, 0.00600f, 0.00576f, 0.00553f, 0.00532f, 0.00512f, 0.00494f, 0.00476f, 0.00460f, 0.00446f, 0.00438f, 0.00438f, 0.00445f, 0.00455f, 0.00466f, 0.00478f, 0.00489f, 0.00496f, 0.00499f, 0.00489f, 0.00471f, 0.00448f, 0.00422f, 0.00392f, 0.00361f, 0.00329f, 0.00298f, 0.00270f, 0.00246f, 0.00225f, 0.00207f, 0.00197f, 0.00191f, 0.00187f, 0.00185f, 0.00180f, 0.00176f, 0.00172f, 0.00168f, 0.00163f, 0.00158f, 0.00152f, 0.00145f, 0.00135f, 0.00125f, 0.00116f, 0.00110f, 0.00110f, 0.00113f, 0.00116f, 0.00117f, 0.00115f, 0.00112f, 0.00107f, 0.00102f, 0.00095f, 0.00088f, 0.00082f, 0.00075f, 0.00067f, 0.00061f, 0.00058f, 0.00061f, 0.00070f, 0.00082f, 0.00093f, 0.00103f, 0.00110f, 0.00114f, 0.00116f, 0.00113f, 0.00106f, 0.00097f, 0.00087f, 0.00075f, 0.00062f, 0.00051f, 0.00040f, 0.00035f, 0.00032f, 0.00032f, 0.00032f, 0.00037f, 0.00042f, 0.00044f, 0.00042f, 0.00024f, 0.00001f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f };
        std::vector<float> _ie_d65                     = std::vector<float>{ 0.00133f, 0.00185f, 0.00228f, 0.00262f, 0.00277f, 0.00277f, 0.00266f, 0.00245f, 0.00208f, 0.00163f, 0.00115f, 0.00070f, 0.00041f, 0.00025f, 0.00015f, 0.00009f, 0.00007f, 0.00008f, 0.00010f, 0.00014f, 0.00017f, 0.00018f, 0.00020f, 0.00021f, 0.00022f, 0.00021f, 0.00020f, 0.00020f, 0.00022f, 0.00025f, 0.00029f, 0.00034f, 0.00027f, 0.00014f, 0.00016f, 0.00042f, 0.00126f, 0.00270f, 0.00435f, 0.00610f, 0.00783f, 0.00942f, 0.01083f, 0.01197f, 0.01261f, 0.01269f, 0.01241f, 0.01181f, 0.01079f, 0.00937f, 0.00789f, 0.00651f, 0.00558f, 0.00530f, 0.00530f, 0.00552f, 0.00589f, 0.00636f, 0.00693f, 0.00760f, 0.00829f, 0.00895f, 0.00969f, 0.01052f, 0.01124f, 0.01161f, 0.01255f, 0.01439f, 0.01812f, 0.02500f, 0.03257f, 0.04021f, 0.04698f, 0.05170f, 0.05526f, 0.05754f, 0.05820f, 0.05665f, 0.05396f, 0.05041f, 0.04627f, 0.04174f, 0.03726f, 0.03315f, 0.02997f, 0.02891f, 0.02858f, 0.02876f, 0.02918f, 0.02931f, 0.02950f, 0.02971f, 0.02991f, 0.02995f, 0.02995f, 0.02990f, 0.02980f, 0.02967f, 0.02949f, 0.02927f, 0.02901f, 0.02870f, 0.02836f, 0.02799f, 0.02759f, 0.02717f, 0.02674f, 0.02628f, 0.02581f, 0.02529f, 0.02477f, 0.02426f, 0.02377f, 0.02320f, 0.02272f, 0.02240f, 0.02230f, 0.02259f, 0.02320f, 0.02413f, 0.02540f, 0.02738f, 0.02967f, 0.03204f, 0.03435f, 0.03635f, 0.03803f, 0.03932f, 0.04014f, 0.04006f, 0.03936f, 0.03821f, 0.03667f, 0.03477f, 0.03263f, 0.03036f, 0.02804f, 0.02589f, 0.02389f, 0.02202f, 0.02032f, 0.01891f, 0.01774f, 0.01680f, 0.01606f, 0.01560f, 0.01536f, 0.01527f, 0.01529f, 0.01538f, 0.01551f, 0.01564f, 0.01576f, 0.01577f, 0.01567f, 0.01551f, 0.01528f, 0.01496f, 0.01455f, 0.01410f, 0.01361f, 0.01309f, 0.01256f, 0.01204f, 0.01155f, 0.01108f, 0.01066f, 0.01037f, 0.01022f, 0.00997f, 0.00976f, 0.01016f, 0.01140f, 0.01386f, 0.01776f, 0.02317f, 0.03023f, 0.04046f, 0.05381f, 0.06771f, 0.08124f, 0.09279f, 0.10150f, 0.10780f, 0.11140f, 0.11070f, 0.10560f, 0.09786f, 0.08821f, 0.07708f, 0.06504f, 0.05286f, 0.04121f, 0.03162f, 0.02482f, 0.01934f, 0.01500f, 0.01156f, 0.00883f, 0.00679f, 0.00533f, 0.00428f, 0.00351f, 0.00303f, 0.00278f, 0.00261f, 0.00240f, 0.00235f, 0.00248f, 0.00281f, 0.00337f, 0.00417f, 0.00525f, 0.00669f, 0.00854f, 0.01063f, 0.01292f, 0.01541f, 0.01806f, 0.02072f, 0.02326f, 0.02558f, 0.02756f, 0.02920f, 0.03043f, 0.03112f, 0.03115f, 0.03072f, 0.02986f, 0.02852f, 0.02669f, 0.02463f, 0.02245f, 0.02033f, 0.01843f, 0.01666f, 0.01504f, 0.01348f, 0.01189f, 0.01079f, 0.01037f, 0.01089f, 0.01257f, 0.01548f, 0.01976f, 0.02635f, 0.03606f, 0.04635f, 0.05639f, 0.06483f, 0.07039f, 0.07414f, 0.07592f, 0.07505f, 0.07094f, 0.06528f, 0.05861f, 0.05160f, 0.04490f, 0.03846f, 0.03261f, 0.02813f, 0.02567f, 0.02402f, 0.02293f, 0.02200f, 0.02089f, 0.01985f, 0.01882f, 0.01768f, 0.01633f, 0.01490f, 0.01343f, 0.01186f, 0.01019f, 0.00859f, 0.00710f, 0.00587f, 0.00501f, 0.00437f, 0.00393f, 0.00371f, 0.00370f, 0.00382f, 0.00404f, 0.00431f, 0.00459f, 0.00486f, 0.00510f, 0.00523f, 0.00522f, 0.00514f, 0.00500f, 0.00479f, 0.00452f, 0.00424f, 0.00396f, 0.00376f, 0.00364f, 0.00356f, 0.00351f, 0.00351f, 0.00354f, 0.00357f, 0.00360f, 0.00356f, 0.00347f, 0.00335f, 0.00323f, 0.00310f, 0.00298f, 0.00287f, 0.00276f, 0.00267f, 0.00259f, 0.00253f, 0.00248f, 0.00246f, 0.00245f, 0.00246f, 0.00249f, 0.00253f, 0.00259f, 0.00266f, 0.00272f, 0.00278f, 0.00282f, 0.00284f, 0.00282f, 0.00274f, 0.00259f, 0.00241f, 0.00222f, 0.00200f, 0.00178f, 0.00159f, 0.00145f, 0.00136f, 0.00136f, 0.00149f, 0.00179f, 0.00245f, 0.00334f, 0.00432f, 0.00534f, 0.00635f, 0.00728f, 0.00803f, 0.00855f, 0.00852f, 0.00814f, 0.00752f, 0.00671f, 0.00572f, 0.00465f, 0.00356f, 0.00253f, 0.00177f, 0.00116f, 0.00067f, 0.00030f, 0.00007f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00002f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00001f, 0.00017f, 0.00031f, 0.00040f, 0.00038f, 0.00025f, 0.00009f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f };
        std::vector<float> _ie_f11                     = std::vector<float>{ 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00087f, 0.00265f, 0.00455f, 0.00646f, 0.00826f, 0.00987f, 0.01120f, 0.01200f, 0.01219f, 0.01196f, 0.01132f, 0.01009f, 0.00827f, 0.00633f, 0.00449f, 0.00319f, 0.00270f, 0.00252f, 0.00257f, 0.00274f, 0.00292f, 0.00320f, 0.00357f, 0.00398f, 0.00440f, 0.00490f, 0.00549f, 0.00588f, 0.00582f, 0.00634f, 0.00782f, 0.01138f, 0.01839f, 0.02617f, 0.03405f, 0.04101f, 0.04577f, 0.04929f, 0.05145f, 0.05190f, 0.05000f, 0.04685f, 0.04273f, 0.03785f, 0.03228f, 0.02672f, 0.02159f, 0.01757f, 0.01614f, 0.01559f, 0.01566f, 0.01601f, 0.01597f, 0.01603f, 0.01615f, 0.01628f, 0.01634f, 0.01639f, 0.01643f, 0.01643f, 0.01639f, 0.01633f, 0.01623f, 0.01612f, 0.01599f, 0.01585f, 0.01569f, 0.01552f, 0.01533f, 0.01515f, 0.01495f, 0.01474f, 0.01450f, 0.01427f, 0.01406f, 0.01389f, 0.01363f, 0.01348f, 0.01353f, 0.01385f, 0.01461f, 0.01575f, 0.01730f, 0.01928f, 0.02217f, 0.02545f, 0.02886f, 0.03220f, 0.03516f, 0.03772f, 0.03978f, 0.04123f, 0.04150f, 0.04095f, 0.03981f, 0.03815f, 0.03602f, 0.03356f, 0.03090f, 0.02815f, 0.02555f, 0.02308f, 0.02074f, 0.01859f, 0.01676f, 0.01520f, 0.01389f, 0.01283f, 0.01210f, 0.01162f, 0.01132f, 0.01117f, 0.01109f, 0.01106f, 0.01107f, 0.01108f, 0.01104f, 0.01093f, 0.01078f, 0.01058f, 0.01031f, 0.00998f, 0.00962f, 0.00921f, 0.00876f, 0.00827f, 0.00781f, 0.00741f, 0.00708f, 0.00686f, 0.00678f, 0.00688f, 0.00683f, 0.00678f, 0.00743f, 0.00911f, 0.01223f, 0.01708f, 0.02377f, 0.03256f, 0.04533f, 0.06206f, 0.07953f, 0.09657f, 0.11120f, 0.12230f, 0.13050f, 0.13520f, 0.13470f, 0.12860f, 0.11930f, 0.10750f, 0.09382f, 0.07895f, 0.06388f, 0.04942f, 0.03753f, 0.02911f, 0.02231f, 0.01690f, 0.01259f, 0.00913f, 0.00652f, 0.00463f, 0.00327f, 0.00229f, 0.00169f, 0.00139f, 0.00121f, 0.00101f, 0.00100f, 0.00119f, 0.00156f, 0.00211f, 0.00297f, 0.00419f, 0.00598f, 0.00843f, 0.01125f, 0.01435f, 0.01766f, 0.02112f, 0.02460f, 0.02799f, 0.03122f, 0.03418f, 0.03676f, 0.03883f, 0.04015f, 0.04053f, 0.04028f, 0.03944f, 0.03799f, 0.03589f, 0.03347f, 0.03086f, 0.02827f, 0.02591f, 0.02365f, 0.02156f, 0.01942f, 0.01707f, 0.01544f, 0.01492f, 0.01588f, 0.01870f, 0.02371f, 0.03125f, 0.04320f, 0.06126f, 0.08042f, 0.09913f, 0.11480f, 0.12500f, 0.13170f, 0.13470f, 0.13260f, 0.12430f, 0.11300f, 0.09975f, 0.08581f, 0.07234f, 0.05947f, 0.04786f, 0.03916f, 0.03478f, 0.03214f, 0.03076f, 0.02986f, 0.02874f, 0.02782f, 0.02693f, 0.02576f, 0.02404f, 0.02209f, 0.01993f, 0.01744f, 0.01457f, 0.01171f, 0.00900f, 0.00673f, 0.00515f, 0.00394f, 0.00311f, 0.00269f, 0.00269f, 0.00294f, 0.00338f, 0.00391f, 0.00448f, 0.00502f, 0.00549f, 0.00575f, 0.00571f, 0.00553f, 0.00524f, 0.00484f, 0.00434f, 0.00384f, 0.00337f, 0.00304f, 0.00290f, 0.00283f, 0.00283f, 0.00292f, 0.00306f, 0.00318f, 0.00323f, 0.00304f, 0.00259f, 0.00208f, 0.00157f, 0.00120f, 0.00099f, 0.00085f, 0.00075f, 0.00066f, 0.00056f, 0.00049f, 0.00047f, 0.00053f, 0.00066f, 0.00082f, 0.00098f, 0.00109f, 0.00115f, 0.00121f, 0.00126f, 0.00140f, 0.00157f, 0.00171f, 0.00179f, 0.00167f, 0.00139f, 0.00106f, 0.00072f, 0.00044f, 0.00023f, 0.00006f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00096f, 0.00243f, 0.00410f, 0.00587f, 0.00768f, 0.00937f, 0.01079f, 0.01181f, 0.01190f, 0.01140f, 0.01044f, 0.00910f, 0.00726f, 0.00519f, 0.00307f, 0.00104f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f };
        std::vector<float> _ie_f12                     = std::vector<float>{ 0.00224f, 0.00293f, 0.00353f, 0.00402f, 0.00418f, 0.00410f, 0.00387f, 0.00351f, 0.00301f, 0.00243f, 0.00184f, 0.00127f, 0.00087f, 0.00060f, 0.00041f, 0.00029f, 0.00024f, 0.00024f, 0.00027f, 0.00032f, 0.00035f, 0.00035f, 0.00035f, 0.00035f, 0.00036f, 0.00037f, 0.00038f, 0.00039f, 0.00042f, 0.00045f, 0.00049f, 0.00054f, 0.00047f, 0.00034f, 0.00035f, 0.00060f, 0.00142f, 0.00284f, 0.00447f, 0.00622f, 0.00797f, 0.00964f, 0.01111f, 0.01229f, 0.01294f, 0.01295f, 0.01255f, 0.01176f, 0.01043f, 0.00859f, 0.00663f, 0.00473f, 0.00331f, 0.00258f, 0.00212f, 0.00187f, 0.00174f, 0.00166f, 0.00166f, 0.00171f, 0.00177f, 0.00178f, 0.00183f, 0.00196f, 0.00192f, 0.00150f, 0.00162f, 0.00262f, 0.00548f, 0.01145f, 0.01811f, 0.02488f, 0.03083f, 0.03484f, 0.03775f, 0.03942f, 0.03953f, 0.03748f, 0.03429f, 0.03023f, 0.02549f, 0.02015f, 0.01484f, 0.00993f, 0.00605f, 0.00455f, 0.00387f, 0.00379f, 0.00401f, 0.00396f, 0.00402f, 0.00417f, 0.00435f, 0.00444f, 0.00455f, 0.00465f, 0.00477f, 0.00491f, 0.00505f, 0.00520f, 0.00536f, 0.00551f, 0.00567f, 0.00583f, 0.00598f, 0.00613f, 0.00627f, 0.00640f, 0.00653f, 0.00663f, 0.00672f, 0.00683f, 0.00697f, 0.00703f, 0.00717f, 0.00745f, 0.00793f, 0.00875f, 0.00986f, 0.01127f, 0.01301f, 0.01544f, 0.01817f, 0.02098f, 0.02374f, 0.02621f, 0.02836f, 0.03012f, 0.03140f, 0.03178f, 0.03152f, 0.03078f, 0.02963f, 0.02806f, 0.02621f, 0.02417f, 0.02204f, 0.01999f, 0.01803f, 0.01613f, 0.01435f, 0.01275f, 0.01134f, 0.01010f, 0.00903f, 0.00818f, 0.00753f, 0.00702f, 0.00663f, 0.00633f, 0.00610f, 0.00594f, 0.00580f, 0.00566f, 0.00551f, 0.00536f, 0.00522f, 0.00505f, 0.00488f, 0.00471f, 0.00455f, 0.00438f, 0.00423f, 0.00410f, 0.00403f, 0.00398f, 0.00400f, 0.00412f, 0.00439f, 0.00456f, 0.00477f, 0.00551f, 0.00703f, 0.00958f, 0.01339f, 0.01862f, 0.02547f, 0.03547f, 0.04860f, 0.06236f, 0.07585f, 0.08759f, 0.09675f, 0.10360f, 0.10790f, 0.10790f, 0.10340f, 0.09643f, 0.08740f, 0.07672f, 0.06493f, 0.05292f, 0.04137f, 0.03185f, 0.02512f, 0.01969f, 0.01539f, 0.01202f, 0.00939f, 0.00745f, 0.00610f, 0.00514f, 0.00445f, 0.00405f, 0.00388f, 0.00379f, 0.00368f, 0.00373f, 0.00395f, 0.00437f, 0.00500f, 0.00590f, 0.00710f, 0.00872f, 0.01083f, 0.01322f, 0.01585f, 0.01868f, 0.02169f, 0.02470f, 0.02765f, 0.03040f, 0.03285f, 0.03499f, 0.03673f, 0.03794f, 0.03850f, 0.03858f, 0.03821f, 0.03735f, 0.03596f, 0.03431f, 0.03250f, 0.03071f, 0.02908f, 0.02751f, 0.02606f, 0.02451f, 0.02270f, 0.02148f, 0.02117f, 0.02209f, 0.02458f, 0.02892f, 0.03543f, 0.04571f, 0.06124f, 0.07773f, 0.09386f, 0.10740f, 0.11640f, 0.12240f, 0.12520f, 0.12360f, 0.11660f, 0.10700f, 0.09575f, 0.08376f, 0.07206f, 0.06086f, 0.05076f, 0.04325f, 0.03961f, 0.03752f, 0.03654f, 0.03601f, 0.03529f, 0.03474f, 0.03417f, 0.03326f, 0.03174f, 0.02997f, 0.02800f, 0.02578f, 0.02331f, 0.02083f, 0.01847f, 0.01644f, 0.01492f, 0.01371f, 0.01279f, 0.01224f, 0.01207f, 0.01211f, 0.01231f, 0.01259f, 0.01288f, 0.01317f, 0.01342f, 0.01353f, 0.01347f, 0.01330f, 0.01304f, 0.01264f, 0.01211f, 0.01155f, 0.01101f, 0.01057f, 0.01029f, 0.01007f, 0.00990f, 0.00976f, 0.00965f, 0.00954f, 0.00941f, 0.00921f, 0.00891f, 0.00858f, 0.00824f, 0.00791f, 0.00759f, 0.00730f, 0.00702f, 0.00680f, 0.00663f, 0.00649f, 0.00637f, 0.00625f, 0.00614f, 0.00606f, 0.00602f, 0.00605f, 0.00616f, 0.00629f, 0.00641f, 0.00652f, 0.00658f, 0.00660f, 0.00658f, 0.00644f, 0.00623f, 0.00596f, 0.00565f, 0.00528f, 0.00488f, 0.00452f, 0.00423f, 0.00402f, 0.00395f, 0.00408f, 0.00447f, 0.00544f, 0.00676f, 0.00824f, 0.00977f, 0.01129f, 0.01267f, 0.01380f, 0.01459f, 0.01460f, 0.01410f, 0.01323f, 0.01206f, 0.01055f, 0.00888f, 0.00717f, 0.00553f, 0.00430f, 0.00328f, 0.00245f, 0.00181f, 0.00144f, 0.00123f, 0.00114f, 0.00113f, 0.00110f, 0.00109f, 0.00110f, 0.00112f, 0.00111f, 0.00109f, 0.00106f, 0.00101f, 0.00089f, 0.00076f, 0.00064f, 0.00056f, 0.00057f, 0.00061f, 0.00066f, 0.00071f, 0.00073f, 0.00075f, 0.00075f, 0.00073f, 0.00068f, 0.00063f, 0.00057f, 0.00051f, 0.00045f, 0.00042f, 0.00040f, 0.00042f, 0.00049f, 0.00057f, 0.00067f, 0.00076f, 0.00085f, 0.00092f, 0.00096f, 0.00095f, 0.00088f, 0.00078f, 0.00066f, 0.00051f, 0.00035f, 0.00021f, 0.00009f, 0.00005f, 0.00008f, 0.00013f, 0.00019f, 0.00027f, 0.00035f, 0.00039f, 0.00040f, 0.00026f, 0.00006f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f, 0.00000f };

        spectra _spectra;
    };

    struct module_spectral_response_data
    {
        module_spectral_response_data() = default;

        module_spectral_response_data(
            bayer_pattern_e color_order,
            const std::array<int, 16> &grid_indices,
            const std::vector<float> &wavelength,
            const std::vector<std::vector<float>> &spectral_response) :
            _color_order(color_order),
            _grid_indices(grid_indices)
        {
            _minimum_wavelength = (uint16_t)std::floor(wavelength.front());
            _maximum_wavelength = (uint16_t)std::ceil(wavelength.back());

            std::vector<float> wl(_maximum_wavelength - _minimum_wavelength + 1);
            std::iota(wl.begin(), wl.end(), _minimum_wavelength);

            for (auto& ch : spectral_response)
            {
                _spectral_response.emplace_back(interp1d(wavelength, ch, wl));
            }
        }

        module_spectral_response_data(
            bayer_pattern_e color_order,
            uint16_t minimum_wl,
            uint16_t maximum_wl,
            const std::array<int, 16> &grid_indices,
            const std::vector<std::vector<float>> &spectral_response) :
            _color_order(color_order),
            _minimum_wavelength(minimum_wl),
            _maximum_wavelength(maximum_wl),
            _grid_indices(grid_indices),
            _spectral_response(spectral_response)
        {
        }

        /// <summary>
        /// Calculates the sensor response using given
        /// illuminant spectrum and object reflectance.
        /// </summary>
        /// <param name="illuminant"> Illuminant </param>
        /// <param name="reflectance"> Object reflectance </param>
        /// <returns> sensor response (red, green, blue) </returns>
        rgb<float> get_rgb(const illuminant &illuminant,
            const function_of_wavelength_data &reflectance) const
        {
            if (!valid())
            {
                // Validation fails, throw exception
                throw std::invalid_argument("Invalid Module spectral response data");
            }

            std::vector<float> channels;
            for (size_t i = 0; i < _spectral_response.size(); ++i)
                channels.emplace_back(illuminant.get(channel_by_index(i), reflectance));

            // Take average of the individual colors (red, green, blue)
            auto channel_average = [&](const std::vector<float> &channels,
                bayer_info_s::color_info_e color)
            {
                average_f<float> average;
                average.count = 0;
                average.sum = 0;
                auto indices = get_channel_indices(color);

                // Go through all the mappings from channel indices array.
                for (size_t i = 0; i < indices.size(); ++i)
                    average += channels[indices[i]];

                return average;
            };

            return rgb<float>{
                channel_average(channels, bayer_info_s::color_info_e::red),
                channel_average(channels, bayer_info_s::color_info_e::green),
                channel_average(channels, bayer_info_s::color_info_e::blue) };
        }

    private:
        bool valid() const
        {
            auto valid = _maximum_wavelength - _minimum_wavelength > 0 && _spectral_response.size() > 0;
            for (auto &channel : _spectral_response)
                valid &= channel.size() == (size_t)(_maximum_wavelength - _minimum_wavelength + 1);

            return valid;
        }

        function_of_wavelength_data channel_by_index(size_t index) const
        {
            return{ _spectral_response[index], _minimum_wavelength, _maximum_wavelength };
        }

        std::vector<int> get_channel_indices(bayer_info_s::color_info_e color) const
        {
            std::vector<int> indices;
            auto layout = bayer_info_s((bayer_pattern_e)_color_order);

            // Go through all the mappings from grid indices array. If mapping matches
            // color enumerator then add to output vector
            for (size_t i = 0; i < _grid_indices.size(); ++i)
            {
                if (_grid_indices[i] != -1 && layout[_grid_indices[i]] == color)
                    indices.push_back(_grid_indices[i]);
            }

            return indices;
        }

        // Member data
        bayer_pattern_e _color_order;
        uint16_t _minimum_wavelength;
        uint16_t _maximum_wavelength;
        std::array<int, 16> _grid_indices;
        std::vector<std::vector<float>> _spectral_response;
    };

    // CIE 1931 2 degree standard observer
    struct ciexyz_standard_observer
    {
        /// <summary>
        /// Gets the CIE 1931 2 degree observer XYZ data under given illuminant
        /// </summary>
        /// <param name="illuminant"> Illuminant </param>
        /// <returns> CIE XYZ </returns>
        static xyz<float> get_xyz(const illuminant &illuminant)
        {
            // Calculate xyz when reflectance is 1 across spectrum range
            std::vector<float> reflectance_spectrum(illuminant.maximum_wavelength - illuminant.minimum_wavelength + 1, 1.0f);
            return get_xyz(illuminant, { reflectance_spectrum, illuminant.minimum_wavelength, illuminant.maximum_wavelength });
        }

        /// <summary>
        /// Gets the CIE 1931 2 degree observer XYZ data under given illuminant
        /// and object reflectance
        /// </summary>
        /// <param name="illuminant"> Illuminant </param>
        /// <param name="reflectance"> Reflectance </param>
        /// <returns> CIE XYZ </returns>
        static xyz<float> get_xyz(const illuminant &illuminant, const function_of_wavelength_data &reflectance)
        {
            return xyz<float>
            {
                illuminant.get(x(), reflectance),
                illuminant.get(y(), reflectance),
                illuminant.get(z(), reflectance)
            };
        }

    private:
        static function_of_wavelength_data x()
        {
            std::vector<float> x{ 0.000129900000f, 0.000145847000f, 0.000163802100f, 0.000184003700f, 0.000206690200f, 0.000232100000f, 0.000260728000f, 0.000293075000f, 0.000329388000f, 0.000369914000f, 0.000414900000f, 0.000464158700f, 0.000518986000f, 0.000581854000f, 0.000655234700f, 0.000741600000f, 0.000845029600f, 0.000964526800f, 0.001094949000f, 0.001231154000f, 0.001368000000f, 0.001502050000f, 0.001642328000f, 0.001802382000f, 0.001995757000f, 0.002236000000f, 0.002535385000f, 0.002892603000f, 0.003300829000f, 0.003753236000f, 0.004243000000f, 0.004762389000f, 0.005330048000f, 0.005978712000f, 0.006741117000f, 0.007650000000f, 0.008751373000f, 0.010028880000f, 0.011421700000f, 0.012869010000f, 0.014310000000f, 0.015704430000f, 0.017147440000f, 0.018781220000f, 0.020748010000f, 0.023190000000f, 0.026207360000f, 0.029782480000f, 0.033880920000f, 0.038468240000f, 0.043510000000f, 0.048995600000f, 0.055022600000f, 0.061718800000f, 0.069212000000f, 0.077630000000f, 0.086958110000f, 0.097176720000f, 0.108406300000f, 0.120767200000f, 0.134380000000f, 0.149358200000f, 0.165395700000f, 0.181983100000f, 0.198611000000f, 0.214770000000f, 0.230186800000f, 0.244879700000f, 0.258777300000f, 0.271807900000f, 0.283900000000f, 0.294943800000f, 0.304896500000f, 0.313787300000f, 0.321645400000f, 0.328500000000f, 0.334351300000f, 0.339210100000f, 0.343121300000f, 0.346129600000f, 0.348280000000f, 0.349599900000f, 0.350147400000f, 0.350013000000f, 0.349287000000f, 0.348060000000f, 0.346373300000f, 0.344262400000f, 0.341808800000f, 0.339094100000f, 0.336200000000f, 0.333197700000f, 0.330041100000f, 0.326635700000f, 0.322886800000f, 0.318700000000f, 0.314025100000f, 0.308884000000f, 0.303290400000f, 0.297257900000f, 0.290800000000f, 0.283970100000f, 0.276721400000f, 0.268917800000f, 0.260422700000f, 0.251100000000f, 0.240847500000f, 0.229851200000f, 0.218407200000f, 0.206811500000f, 0.195360000000f, 0.184213600000f, 0.173327300000f, 0.162688100000f, 0.152283300000f, 0.142100000000f, 0.132178600000f, 0.122569600000f, 0.113275200000f, 0.104297900000f, 0.095640000000f, 0.087299550000f, 0.079308040000f, 0.071717760000f, 0.064580990000f, 0.057950010000f, 0.051862110000f, 0.046281520000f, 0.041150880000f, 0.036412830000f, 0.032010000000f, 0.027917200000f, 0.024144400000f, 0.020687000000f, 0.017540400000f, 0.014700000000f, 0.012161790000f, 0.009919960000f, 0.007967240000f, 0.006296346000f, 0.004900000000f, 0.003777173000f, 0.002945320000f, 0.002424880000f, 0.002236293000f, 0.002400000000f, 0.002925520000f, 0.003836560000f, 0.005174840000f, 0.006982080000f, 0.009300000000f, 0.012149490000f, 0.015535880000f, 0.019477520000f, 0.023992770000f, 0.029100000000f, 0.034814850000f, 0.041120160000f, 0.047985040000f, 0.055378610000f, 0.063270000000f, 0.071635010000f, 0.080462240000f, 0.089739960000f, 0.099456450000f, 0.109600000000f, 0.120167400000f, 0.131114500000f, 0.142367900000f, 0.153854200000f, 0.165500000000f, 0.177257100000f, 0.189140000000f, 0.201169400000f, 0.213365800000f, 0.225749900000f, 0.238320900000f, 0.251066800000f, 0.263992200000f, 0.277101700000f, 0.290400000000f, 0.303891200000f, 0.317572600000f, 0.331438400000f, 0.345482800000f, 0.359700000000f, 0.374083900000f, 0.388639600000f, 0.403378400000f, 0.418311500000f, 0.433449900000f, 0.448795300000f, 0.464336000000f, 0.480064000000f, 0.495971300000f, 0.512050100000f, 0.528295900000f, 0.544691600000f, 0.561209400000f, 0.577821500000f, 0.594500000000f, 0.611220900000f, 0.627975800000f, 0.644760200000f, 0.661569700000f, 0.678400000000f, 0.695239200000f, 0.712058600000f, 0.728828400000f, 0.745518800000f, 0.762100000000f, 0.778543200000f, 0.794825600000f, 0.810926400000f, 0.826824800000f, 0.842500000000f, 0.857932500000f, 0.873081600000f, 0.887894400000f, 0.902318100000f, 0.916300000000f, 0.929799500000f, 0.942798400000f, 0.955277600000f, 0.967217900000f, 0.978600000000f, 0.989385600000f, 0.999548800000f, 1.009089200000f, 1.018006400000f, 1.026300000000f, 1.033982700000f, 1.040986000000f, 1.047188000000f, 1.052466700000f, 1.056700000000f, 1.059794400000f, 1.061799200000f, 1.062806800000f, 1.062909600000f, 1.062200000000f, 1.060735200000f, 1.058443600000f, 1.055224400000f, 1.050976800000f, 1.045600000000f, 1.039036900000f, 1.031360800000f, 1.022666200000f, 1.013047700000f, 1.002600000000f, 0.991367500000f, 0.979331400000f, 0.966491600000f, 0.952847900000f, 0.938400000000f, 0.923194000000f, 0.907244000000f, 0.890502000000f, 0.872920000000f, 0.854449900000f, 0.835084000000f, 0.814946000000f, 0.794186000000f, 0.772954000000f, 0.751400000000f, 0.729583600000f, 0.707588800000f, 0.685602200000f, 0.663810400000f, 0.642400000000f, 0.621514900000f, 0.601113800000f, 0.581105200000f, 0.561397700000f, 0.541900000000f, 0.522599500000f, 0.503546400000f, 0.484743600000f, 0.466193900000f, 0.447900000000f, 0.429861300000f, 0.412098000000f, 0.394644000000f, 0.377533300000f, 0.360800000000f, 0.344456300000f, 0.328516800000f, 0.313019200000f, 0.298001100000f, 0.283500000000f, 0.269544800000f, 0.256118400000f, 0.243189600000f, 0.230727200000f, 0.218700000000f, 0.207097100000f, 0.195923200000f, 0.185170800000f, 0.174832300000f, 0.164900000000f, 0.155366700000f, 0.146230000000f, 0.137490000000f, 0.129146700000f, 0.121200000000f, 0.113639700000f, 0.106465000000f, 0.099690440000f, 0.093330610000f, 0.087400000000f, 0.081900960000f, 0.076804280000f, 0.072077120000f, 0.067686640000f, 0.063600000000f, 0.059806850000f, 0.056282160000f, 0.052971040000f, 0.049818610000f, 0.046770000000f, 0.043784050000f, 0.040875360000f, 0.038072640000f, 0.035404610000f, 0.032900000000f, 0.030564190000f, 0.028380560000f, 0.026344840000f, 0.024452750000f, 0.022700000000f, 0.021084290000f, 0.019599880000f, 0.018237320000f, 0.016987170000f, 0.015840000000f, 0.014790640000f, 0.013831320000f, 0.012948680000f, 0.012129200000f, 0.011359160000f, 0.010629350000f, 0.009938846000f, 0.009288422000f, 0.008678854000f, 0.008110916000f, 0.007582388000f, 0.007088746000f, 0.006627313000f, 0.006195408000f, 0.005790346000f, 0.005409826000f, 0.005052583000f, 0.004717512000f, 0.004403507000f, 0.004109457000f, 0.003833913000f, 0.003575748000f, 0.003334342000f, 0.003109075000f, 0.002899327000f, 0.002704348000f, 0.002523020000f, 0.002354168000f, 0.002196616000f, 0.002049190000f, 0.001910960000f, 0.001781438000f, 0.001660110000f, 0.001546459000f, 0.001439971000f, 0.001340042000f, 0.001246275000f, 0.001158471000f, 0.001076430000f, 0.000999949300f, 0.000928735800f, 0.000862433200f, 0.000800750300f, 0.000743396000f, 0.000690078600f, 0.000640515600f, 0.000594502100f, 0.000551864600f, 0.000512429000f, 0.000476021300f, 0.000442453600f, 0.000411511700f, 0.000382981400f, 0.000356649100f, 0.000332301100f, 0.000309758600f, 0.000288887100f, 0.000269539400f, 0.000251568200f, 0.000234826100f, 0.000219171000f, 0.000204525800f, 0.000190840500f, 0.000178065400f, 0.000166150500f, 0.000155023600f, 0.000144621900f, 0.000134909800f, 0.000125852000f, 0.000117413000f, 0.000109551500f, 0.000102224500f, 0.000095394450f, 0.000089023900f, 0.000083075270f, 0.000077512690f, 0.000072313040f, 0.000067457780f, 0.000062928440f, 0.000058706520f, 0.000054770280f, 0.000051099180f, 0.000047676540f, 0.000044485670f, 0.000041509940f, 0.000038733240f, 0.000036142030f, 0.000033723520f, 0.000031464870f, 0.000029353260f, 0.000027375730f, 0.000025524330f, 0.000023793760f, 0.000022178700f, 0.000020673830f, 0.000019272260f, 0.000017966400f, 0.000016749910f, 0.000015616480f, 0.000014559770f, 0.000013573870f, 0.000012654360f, 0.000011797230f, 0.000010998440f, 0.000010253980f, 0.000009559646f, 0.000008912044f, 0.000008308358f, 0.000007745769f, 0.000007221456f, 0.000006732475f, 0.000006276423f, 0.000005851304f, 0.000005455118f, 0.000005085868f, 0.000004741466f, 0.000004420236f, 0.000004120783f, 0.000003841716f, 0.000003581652f, 0.000003339127f, 0.000003112949f, 0.000002902121f, 0.000002705645f, 0.000002522525f, 0.000002351726f, 0.000002192415f, 0.000002043902f, 0.000001905497f, 0.000001776509f, 0.000001656215f, 0.000001544022f, 0.000001439440f, 0.000001341977f, 0.000001251141f };
            return{ x, 360, 830 };
        }

        static function_of_wavelength_data y()
        {
            std::vector<float> y{ 0.000003917000f, 0.000004393581f, 0.000004929604f, 0.000005532136f, 0.000006208245f, 0.000006965000f, 0.000007813219f, 0.000008767336f, 0.000009839844f, 0.000011043230f, 0.000012390000f, 0.000013886410f, 0.000015557280f, 0.000017442960f, 0.000019583750f, 0.000022020000f, 0.000024839650f, 0.000028041260f, 0.000031531040f, 0.000035215210f, 0.000039000000f, 0.000042826400f, 0.000046914600f, 0.000051589600f, 0.000057176400f, 0.000064000000f, 0.000072344210f, 0.000082212240f, 0.000093508160f, 0.000106136100f, 0.000120000000f, 0.000134984000f, 0.000151492000f, 0.000170208000f, 0.000191816000f, 0.000217000000f, 0.000246906700f, 0.000281240000f, 0.000318520000f, 0.000357266700f, 0.000396000000f, 0.000433714700f, 0.000473024000f, 0.000517876000f, 0.000572218700f, 0.000640000000f, 0.000724560000f, 0.000825500000f, 0.000941160000f, 0.001069880000f, 0.001210000000f, 0.001362091000f, 0.001530752000f, 0.001720368000f, 0.001935323000f, 0.002180000000f, 0.002454800000f, 0.002764000000f, 0.003117800000f, 0.003526400000f, 0.004000000000f, 0.004546240000f, 0.005159320000f, 0.005829280000f, 0.006546160000f, 0.007300000000f, 0.008086507000f, 0.008908720000f, 0.009767680000f, 0.010664430000f, 0.011600000000f, 0.012573170000f, 0.013582720000f, 0.014629680000f, 0.015715090000f, 0.016840000000f, 0.018007360000f, 0.019214480000f, 0.020453920000f, 0.021718240000f, 0.023000000000f, 0.024294610000f, 0.025610240000f, 0.026958570000f, 0.028351250000f, 0.029800000000f, 0.031310830000f, 0.032883680000f, 0.034521120000f, 0.036225710000f, 0.038000000000f, 0.039846670000f, 0.041768000000f, 0.043766000000f, 0.045842670000f, 0.048000000000f, 0.050243680000f, 0.052573040000f, 0.054980560000f, 0.057458720000f, 0.060000000000f, 0.062601970000f, 0.065277520000f, 0.068042080000f, 0.070911090000f, 0.073900000000f, 0.077016000000f, 0.080266400000f, 0.083666800000f, 0.087232800000f, 0.090980000000f, 0.094917550000f, 0.099045840000f, 0.103367400000f, 0.107884600000f, 0.112600000000f, 0.117532000000f, 0.122674400000f, 0.127992800000f, 0.133452800000f, 0.139020000000f, 0.144676400000f, 0.150469300000f, 0.156461900000f, 0.162717700000f, 0.169300000000f, 0.176243100000f, 0.183558100000f, 0.191273500000f, 0.199418000000f, 0.208020000000f, 0.217119900000f, 0.226734500000f, 0.236857100000f, 0.247481200000f, 0.258600000000f, 0.270184900000f, 0.282293900000f, 0.295050500000f, 0.308578000000f, 0.323000000000f, 0.338402100000f, 0.354685800000f, 0.371698600000f, 0.389287500000f, 0.407300000000f, 0.425629900000f, 0.444309600000f, 0.463394400000f, 0.482939500000f, 0.503000000000f, 0.523569300000f, 0.544512000000f, 0.565690000000f, 0.586965300000f, 0.608200000000f, 0.629345600000f, 0.650306800000f, 0.670875200000f, 0.690842400000f, 0.710000000000f, 0.728185200000f, 0.745463600000f, 0.761969400000f, 0.777836800000f, 0.793200000000f, 0.808110400000f, 0.822496200000f, 0.836306800000f, 0.849491600000f, 0.862000000000f, 0.873810800000f, 0.884962400000f, 0.895493600000f, 0.905443200000f, 0.914850100000f, 0.923734800000f, 0.932092400000f, 0.939922600000f, 0.947225200000f, 0.954000000000f, 0.960256100000f, 0.966007400000f, 0.971260600000f, 0.976022500000f, 0.980300000000f, 0.984092400000f, 0.987418200000f, 0.990312800000f, 0.992811600000f, 0.994950100000f, 0.996710800000f, 0.998098300000f, 0.999112000000f, 0.999748200000f, 1.000000000000f, 0.999856700000f, 0.999304600000f, 0.998325500000f, 0.996898700000f, 0.995000000000f, 0.992600500000f, 0.989742600000f, 0.986444400000f, 0.982724100000f, 0.978600000000f, 0.974083700000f, 0.969171200000f, 0.963856800000f, 0.958134900000f, 0.952000000000f, 0.945450400000f, 0.938499200000f, 0.931162800000f, 0.923457600000f, 0.915400000000f, 0.907006400000f, 0.898277200000f, 0.889204800000f, 0.879781600000f, 0.870000000000f, 0.859861300000f, 0.849392000000f, 0.838622000000f, 0.827581300000f, 0.816300000000f, 0.804794700000f, 0.793082000000f, 0.781192000000f, 0.769154700000f, 0.757000000000f, 0.744754100000f, 0.732422400000f, 0.720003600000f, 0.707496500000f, 0.694900000000f, 0.682219200000f, 0.669471600000f, 0.656674400000f, 0.643844800000f, 0.631000000000f, 0.618155500000f, 0.605314400000f, 0.592475600000f, 0.579637900000f, 0.566800000000f, 0.553961100000f, 0.541137200000f, 0.528352800000f, 0.515632300000f, 0.503000000000f, 0.490468800000f, 0.478030400000f, 0.465677600000f, 0.453403200000f, 0.441200000000f, 0.429080000000f, 0.417036000000f, 0.405032000000f, 0.393032000000f, 0.381000000000f, 0.368918400000f, 0.356827200000f, 0.344776800000f, 0.332817600000f, 0.321000000000f, 0.309338100000f, 0.297850400000f, 0.286593600000f, 0.275624500000f, 0.265000000000f, 0.254763200000f, 0.244889600000f, 0.235334400000f, 0.226052800000f, 0.217000000000f, 0.208161600000f, 0.199548800000f, 0.191155200000f, 0.182974400000f, 0.175000000000f, 0.167223500000f, 0.159646400000f, 0.152277600000f, 0.145125900000f, 0.138200000000f, 0.131500300000f, 0.125024800000f, 0.118779200000f, 0.112769100000f, 0.107000000000f, 0.101476200000f, 0.096188640000f, 0.091122960000f, 0.086264850000f, 0.081600000000f, 0.077120640000f, 0.072825520000f, 0.068710080000f, 0.064769760000f, 0.061000000000f, 0.057396210000f, 0.053955040000f, 0.050673760000f, 0.047549650000f, 0.044580000000f, 0.041758720000f, 0.039084960000f, 0.036563840000f, 0.034200480000f, 0.032000000000f, 0.029962610000f, 0.028076640000f, 0.026329360000f, 0.024708050000f, 0.023200000000f, 0.021800770000f, 0.020501120000f, 0.019281080000f, 0.018120690000f, 0.017000000000f, 0.015903790000f, 0.014837180000f, 0.013810680000f, 0.012834780000f, 0.011920000000f, 0.011068310000f, 0.010273390000f, 0.009533311000f, 0.008846157000f, 0.008210000000f, 0.007623781000f, 0.007085424000f, 0.006591476000f, 0.006138485000f, 0.005723000000f, 0.005343059000f, 0.004995796000f, 0.004676404000f, 0.004380075000f, 0.004102000000f, 0.003838453000f, 0.003589099000f, 0.003354219000f, 0.003134093000f, 0.002929000000f, 0.002738139000f, 0.002559876000f, 0.002393244000f, 0.002237275000f, 0.002091000000f, 0.001953587000f, 0.001824580000f, 0.001703580000f, 0.001590187000f, 0.001484000000f, 0.001384496000f, 0.001291268000f, 0.001204092000f, 0.001122744000f, 0.001047000000f, 0.000976589600f, 0.000911108800f, 0.000850133200f, 0.000793238400f, 0.000740000000f, 0.000690082700f, 0.000643310000f, 0.000599496000f, 0.000558454700f, 0.000520000000f, 0.000483913600f, 0.000450052800f, 0.000418345200f, 0.000388718400f, 0.000361100000f, 0.000335383500f, 0.000311440400f, 0.000289165600f, 0.000268453900f, 0.000249200000f, 0.000231301900f, 0.000214685600f, 0.000199288400f, 0.000185047500f, 0.000171900000f, 0.000159778100f, 0.000148604400f, 0.000138301600f, 0.000128792500f, 0.000120000000f, 0.000111859500f, 0.000104322400f, 0.000097335600f, 0.000090845870f, 0.000084800000f, 0.000079146670f, 0.000073858000f, 0.000068916000f, 0.000064302670f, 0.000060000000f, 0.000055981870f, 0.000052225600f, 0.000048718400f, 0.000045447470f, 0.000042400000f, 0.000039561040f, 0.000036915120f, 0.000034448680f, 0.000032148160f, 0.000030000000f, 0.000027991250f, 0.000026113560f, 0.000024360240f, 0.000022724610f, 0.000021200000f, 0.000019778550f, 0.000018452850f, 0.000017216870f, 0.000016064590f, 0.000014990000f, 0.000013987280f, 0.000013051550f, 0.000012178180f, 0.000011362540f, 0.000010600000f, 0.000009885877f, 0.000009217304f, 0.000008592362f, 0.000008009133f, 0.000007465700f, 0.000006959567f, 0.000006487995f, 0.000006048699f, 0.000005639396f, 0.000005257800f, 0.000004901771f, 0.000004569720f, 0.000004260194f, 0.000003971739f, 0.000003702900f, 0.000003452163f, 0.000003218302f, 0.000003000300f, 0.000002797139f, 0.000002607800f, 0.000002431220f, 0.000002266531f, 0.000002113013f, 0.000001969943f, 0.000001836600f, 0.000001712230f, 0.000001596228f, 0.000001488090f, 0.000001387314f, 0.000001293400f, 0.000001205820f, 0.000001124143f, 0.000001048009f, 0.000000977058f, 0.000000910930f, 0.000000849251f, 0.000000791721f, 0.000000738090f, 0.000000688110f, 0.000000641530f, 0.000000598090f, 0.000000557575f, 0.000000519808f, 0.000000484612f, 0.000000451810f };
            return{ y, 360, 830 };
        }

        static function_of_wavelength_data z()
        {
            std::vector<float> z{ 0.000606100000f, 0.000680879200f, 0.000765145600f, 0.000860012400f, 0.000966592800f, 0.001086000000f, 0.001220586000f, 0.001372729000f, 0.001543579000f, 0.001734286000f, 0.001946000000f, 0.002177777000f, 0.002435809000f, 0.002731953000f, 0.003078064000f, 0.003486000000f, 0.003975227000f, 0.004540880000f, 0.005158320000f, 0.005802907000f, 0.006450001000f, 0.007083216000f, 0.007745488000f, 0.008501152000f, 0.009414544000f, 0.010549990000f, 0.011965800000f, 0.013655870000f, 0.015588050000f, 0.017730150000f, 0.020050010000f, 0.022511360000f, 0.025202880000f, 0.028279720000f, 0.031897040000f, 0.036210000000f, 0.041437710000f, 0.047503720000f, 0.054119880000f, 0.060998030000f, 0.067850010000f, 0.074486320000f, 0.081361560000f, 0.089153640000f, 0.098540480000f, 0.110200000000f, 0.124613300000f, 0.141701700000f, 0.161303500000f, 0.183256800000f, 0.207400000000f, 0.233692100000f, 0.262611400000f, 0.294774600000f, 0.330798500000f, 0.371300000000f, 0.416209100000f, 0.465464200000f, 0.519694800000f, 0.579530300000f, 0.645600000000f, 0.718483800000f, 0.796713300000f, 0.877845900000f, 0.959439000000f, 1.039050100000f, 1.115367300000f, 1.188497100000f, 1.258123300000f, 1.323929600000f, 1.385600000000f, 1.442635200000f, 1.494803500000f, 1.542190300000f, 1.584880700000f, 1.622960000000f, 1.656404800000f, 1.685295900000f, 1.709874500000f, 1.730382100000f, 1.747060000000f, 1.760044600000f, 1.769623300000f, 1.776263700000f, 1.780433400000f, 1.782600000000f, 1.782968200000f, 1.781699800000f, 1.779198200000f, 1.775867100000f, 1.772110000000f, 1.768258900000f, 1.764039000000f, 1.758943800000f, 1.752466300000f, 1.744100000000f, 1.733559500000f, 1.720858100000f, 1.705936900000f, 1.688737200000f, 1.669200000000f, 1.647528700000f, 1.623412700000f, 1.596022300000f, 1.564528000000f, 1.528100000000f, 1.486111400000f, 1.439521500000f, 1.389879900000f, 1.338736200000f, 1.287640000000f, 1.237422300000f, 1.187824300000f, 1.138761100000f, 1.090148000000f, 1.041900000000f, 0.994197600000f, 0.947347300000f, 0.901453100000f, 0.856619300000f, 0.812950100000f, 0.770517300000f, 0.729444800000f, 0.689913600000f, 0.652104900000f, 0.616200000000f, 0.582328600000f, 0.550416200000f, 0.520337600000f, 0.491967300000f, 0.465180000000f, 0.439924600000f, 0.416183600000f, 0.393882200000f, 0.372945900000f, 0.353300000000f, 0.334857800000f, 0.317552100000f, 0.301337500000f, 0.286168600000f, 0.272000000000f, 0.258817100000f, 0.246483800000f, 0.234771800000f, 0.223453300000f, 0.212300000000f, 0.201169200000f, 0.190119600000f, 0.179225400000f, 0.168560800000f, 0.158200000000f, 0.148138300000f, 0.138375800000f, 0.128994200000f, 0.120075100000f, 0.111700000000f, 0.103904800000f, 0.096667480000f, 0.089982720000f, 0.083845310000f, 0.078249990000f, 0.073208990000f, 0.068678160000f, 0.064567840000f, 0.060788350000f, 0.057250010000f, 0.053904350000f, 0.050746640000f, 0.047752760000f, 0.044898590000f, 0.042160000000f, 0.039507280000f, 0.036935640000f, 0.034458360000f, 0.032088720000f, 0.029840000000f, 0.027711810000f, 0.025694440000f, 0.023787160000f, 0.021989250000f, 0.020300000000f, 0.018718050000f, 0.017240360000f, 0.015863640000f, 0.014584610000f, 0.013400000000f, 0.012307230000f, 0.011301880000f, 0.010377920000f, 0.009529306000f, 0.008749999000f, 0.008035200000f, 0.007381600000f, 0.006785400000f, 0.006242800000f, 0.005749999000f, 0.005303600000f, 0.004899800000f, 0.004534200000f, 0.004202400000f, 0.003900000000f, 0.003623200000f, 0.003370600000f, 0.003141400000f, 0.002934800000f, 0.002749999000f, 0.002585200000f, 0.002438600000f, 0.002309400000f, 0.002196800000f, 0.002100000000f, 0.002017733000f, 0.001948200000f, 0.001889800000f, 0.001840933000f, 0.001800000000f, 0.001766267000f, 0.001737800000f, 0.001711200000f, 0.001683067000f, 0.001650001000f, 0.001610133000f, 0.001564400000f, 0.001513600000f, 0.001458533000f, 0.001400000000f, 0.001336667000f, 0.001270000000f, 0.001205000000f, 0.001146667000f, 0.001100000000f, 0.001068800000f, 0.001049400000f, 0.001035600000f, 0.001021200000f, 0.001000000000f, 0.000968640000f, 0.000929920000f, 0.000886880000f, 0.000842560000f, 0.000800000000f, 0.000760960000f, 0.000723680000f, 0.000685920000f, 0.000645440000f, 0.000600000000f, 0.000547866700f, 0.000491600000f, 0.000435400000f, 0.000383466700f, 0.000340000000f, 0.000307253300f, 0.000283160000f, 0.000265440000f, 0.000251813300f, 0.000240000000f, 0.000229546700f, 0.000220640000f, 0.000211960000f, 0.000202186700f, 0.000190000000f, 0.000174213300f, 0.000155640000f, 0.000135960000f, 0.000116853300f, 0.000100000000f, 0.000086133330f, 0.000074600000f, 0.000065000000f, 0.000056933330f, 0.000049999990f, 0.000044160000f, 0.000039480000f, 0.000035720000f, 0.000032640000f, 0.000030000000f, 0.000027653330f, 0.000025560000f, 0.000023640000f, 0.000021813330f, 0.000020000000f, 0.000018133330f, 0.000016200000f, 0.000014200000f, 0.000012133330f, 0.000010000000f, 0.000007733333f, 0.000005400000f, 0.000003200000f, 0.000001333333f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f, 0.000000000000f };
            return{ z, 360, 830 };
        }
    };

    class color_checker_classic
    {
    public:
        /// <summary>
        /// Calculate sensor response in sensor RGB for the given illuminant
        /// </summary>
        /// <returns> Collection of sensor responses in sensor RGB </returns>
        static std::vector<rgb<float>> get_rgb(const module_spectral_response_data &data,
            const illuminant &illuminant)
        {
            std::vector<rgb<float>> output;
            for (int i = 0; i < macbeth::patch_count; i++)
            {
                function_of_wavelength_data wl{ macbeth::get_patch_reflectance(i), macbeth::minimum_wl, macbeth::maximum_wl };
                output.emplace_back(data.get_rgb(illuminant, wl));
            }
            // Normalize values to range [0,1] by using white patch (No19)
            auto norm_factor = 0.8963;
            auto ratio = norm_factor / output[18].max();
            for (auto& point : output)
                point *= ratio;

            return output;
        }
    };

    class munsell_color_patches
    {
    public:
        /// <summary>
        /// Calculate sensor response in sensor RGB for the given illuminant
        /// </summary>
        /// <returns> Collection of sensor responses in sensor RGB </returns>
        static std::vector<rgb<float>> get_sensor_rgb(const module_spectral_response_data &data,
            const illuminant &illuminant)
        {
            std::vector<rgb<float>> output;
            for (int i = 0; i < munsell::patch_count; i++)
            {
                function_of_wavelength_data wl{ munsell::get_patch_reflectance(i), munsell::minimum_wl, munsell::maximum_wl };
                output.emplace_back(data.get_rgb(illuminant, wl));
            }

            // Normalize values to range [0,1] by using NEUT950 patch (No1521)
            auto norm_factor = 0.883592f;
            auto ratio = norm_factor / output[1521].max();
            for (auto& point : output)
                point *= ratio;

            return output;
        }

        /// <summary>
        /// Calculate sensor response in sensor RGB for the given illuminant
        /// </summary>
        /// <returns> Collection of sensor responses in sensor RGB </returns>
        static std::vector<lab<float>> get_patch_lab(const illuminant &illuminant)
        {
            std::vector<xyz<float>> xyz_values;
            xyz_values.reserve(munsell::patch_count);
            for (int i = 0; i < munsell::patch_count; i++)
            {
                function_of_wavelength_data wl{ munsell::get_patch_reflectance(i), munsell::minimum_wl, munsell::maximum_wl };
                xyz_values.emplace_back(ciexyz_standard_observer::get_xyz(illuminant, wl));
            }

            // Normalize values to range [0,1] by using NEUT950 patch (No1521)
            auto norm_factor = 0.879622f;
            auto ratio = norm_factor / xyz_values[1521].y;
            for (auto& point : xyz_values)
            {
                point *= ratio;
            }

            return std::vector<lab<float>>(xyz_values.begin(), xyz_values.end());
        }
    };

    class module_spectral_response
    {
    public:
        /// <summary>
        /// Queries all illuminant spectrums supported by the class
        /// </summary>
        /// <returns> Collection of the illuminant id's </returns>
        std::vector<std::string> query_light_sources()
        {
            std::vector<std::string> illuminant_ids;
            for (auto& spectrum : _illuminant_data.get())
                illuminant_ids.push_back(spectrum.first);
            return illuminant_ids;
        }

        /// <summary>
        /// Get the light source type
        /// </summary>
        /// <param name="id"> Illuminant id </param>
        /// <returns> Light source type </returns>
        lightsource_type get_light_source_type(const std::string &id)
        {
            auto spectra = _illuminant_data.get();
            auto spectrum = spectra.find(id);
            if (spectrum != spectra.end())
            {
                return spectrum->second.lightsource;
            }

            // Could not find illuminant, throw expection
            throw std::invalid_argument("Could not find illuminant");
        }

        /// <summary>
        /// Gets the color checker classic sensor response under given illuminant.
        /// </summary>
        /// <param name="id"> Illuminant id </param>
        /// <returns> Collection of sensor responses (RGB) </returns>
        std::vector<rgb<float>> get_color_checker_classic(const std::string &id)
        {
            return color_checker_classic::get_rgb(_msr, get_illuminant(id));
        }

        /// <summary>
        /// Gets the chromaticity response under given illuminant
        /// </summary>
        /// <param name="id"> Illuminant id </param>
        /// <returns> Chromaticity response </returns>
        chromaticity get_chromaticity(const std::string &id)
        {
            // Calculate white point when reflectance is 1 across spectrum range
            auto ill = get_illuminant(id);
            std::vector<float> reflectance_spectrum(ill.maximum_wavelength - ill.minimum_wavelength  + 1, 1.0f);
            function_of_wavelength_data reflectance{ reflectance_spectrum, ill.minimum_wavelength, ill.maximum_wavelength };

            auto rgb = _msr.get_rgb(ill, reflectance);
            if (rgb.g == 0.0f)
                throw std::domain_error("Division by zero");

            return chromaticity(rgb.r / rgb.g, rgb.b / rgb.g);
        }

        /// <summary>
        /// Gets the CIE XYZ under given illuminant
        /// </summary>
        /// <param name="id"> Illuminant id </param>
        /// <returns> CIE XYZ </returns>
        xyz<float> get_xyz(const std::string &id)
        {
            return ciexyz_standard_observer::get_xyz(get_illuminant(id));
        }

        /// <summary>
        /// Sets new illuminant
        /// </summary>
        /// <param name="id"></param>
        /// <param name="spectrum"></param>
        void set_illuminant(const std::string &id, const illuminant &illuminant)
        {
            _illuminant_data.set(id, illuminant);
        }

        /// <summary>
        /// Sets module spectral response data
        /// </summary>
        /// <param name="data"> Module spectral response data </param>
        void set_module_spectral_response_data(const module_spectral_response_data &data)
        {
            _msr = data;
        }

        /// <summary>
        /// Get all Munsell color patches in Lab color space
        /// </summary>
        /// <returns> Munsell color patches </returns>
        std::vector<lab<float>> get_munsell_patches()
        {
            // Lab values under D65 illuminant
            return munsell_color_patches::get_patch_lab(get_illuminant("Standard Illuminant D65"));
        }

        /// <summary>
        ///
        /// </summary>
        /// <returns> </returns>
        std::vector<rgb<float>> get_munsell_patches(const std::string &id)
        {
            return munsell_color_patches::get_sensor_rgb(_msr, get_illuminant(id));
        }

    private:
        /// <summary>
        /// Get the illuminant data
        /// </summary>
        /// <param name="id"> Illuminant id </param>
        /// <returns> Illuminant </returns>
        illuminant get_illuminant(const std::string &id)
        {
            auto spectra = _illuminant_data.get();
            auto spectrum = spectra.find(id);
            if (spectrum != spectra.end())
            {
                return spectrum->second;
            }

            // Could not find illuminant, throw expection
            throw std::invalid_argument("Could not find illuminant");
        }

        module_spectral_response_data _msr;
        illuminant_data _illuminant_data;
    };
}
